<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FAQ on ContinuousPipe Docs</title>
    <link>/docs/faq/index.xml</link>
    <description>Recent content in FAQ on ContinuousPipe Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>Released under the MIT license</copyright>
    <atom:link href="/docs/faq/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Accounts: How do I create a billing profile?</title>
      <link>/docs/faq/how-do-I-create-a-billing-profile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/faq/how-do-I-create-a-billing-profile/</guid>
      <description>&lt;p&gt;To create a billing profile you will first need to log into the &lt;a href=&#34;https://your-ui.example.com/&#34;&gt;ContinuousPipe console&lt;/a&gt;. You then need to navigate to the Account section using the sub menu in the top right corner.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/docs/images/faq/billing-account-menu.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Within the account section, select the &amp;ldquo;Billing&amp;rdquo; tab. You will need to select how many users you would like to subscribe. The number of users is effectively the number of people who will have GitHub or Bitbucket accounts that will be pushing to repositories set up in a ContinuousPipe.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/docs/images/faq/billing-create-subscription.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you click on &amp;ldquo;Subscribe&amp;rdquo; a window will open to &lt;a href=&#34;https://recurly.com/&#34;&gt;Recurly&lt;/a&gt;, which is a third party payment subscription handler. Follow the instructions to complete payment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/docs/images/faq/billing-recurly-interface.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can also adjust the number of users up or down at this stage:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/docs/images/faq/billing-adjust-users.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After payment is completed, the &amp;ldquo;Billing&amp;rdquo; tab in the ContinuousPipe account section should now display subscription information.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/docs/images/faq/billing-display-subscription.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>General: What are the ContinuousPipe images?</title>
      <link>/docs/faq/what-are-the-continuous-pipe-images/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/faq/what-are-the-continuous-pipe-images/</guid>
      <description>&lt;p&gt;ContinuousPipe provides images for many common technologies that you may need to use in your application infrastructure.&lt;/p&gt;

&lt;p&gt;Some examples are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://quay.io/repository/continuouspipe/php7.1-nginx&#34;&gt;PHP with Nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://quay.io/repository/continuouspipe/php7.1-apache&#34;&gt;PHP with Apache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://quay.io/repository/continuouspipe/mysql8.0&#34;&gt;MYSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://quay.io/repository/continuouspipe/redis3&#34;&gt;Redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://quay.io/repository/continuouspipe/solr6&#34;&gt;Solr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://quay.io/repository/continuouspipe/varnish4&#34;&gt;Varnish&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The full range of images can be seen at &lt;a href=&#34;https://quay.io/organization/continuouspipe&#34;&gt;https://quay.io/organization/continuouspipe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Docker configuration used to create the images can be seen at &lt;a href=&#34;https://github.com/continuouspipe/dockerfiles&#34;&gt;https://github.com/continuouspipe/dockerfiles&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Any of the images can be used by referencing them in your &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM quay.io/continuouspipe/php7.1-apache:stable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The benefit of using ContinuousPipe images are that they have been created according to best practices on security and performance. For example, the Apache and Nginx server images are automatically configured to use HTTPS only websites and install self signed SSL certificate on container start. More information about the specific setup of each image is provided in the README for each image within &lt;a href=&#34;https://github.com/continuouspipe/dockerfiles&#34;&gt;https://github.com/continuouspipe/dockerfiles&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;ContinuousPipe images are also compatible with the &lt;a href=&#34;/docs/docs/remote-development/getting-started/&#34;&gt;remote development&lt;/a&gt; functionality without any additional configuration.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>General: What are the ContinuousPipe demo sites?</title>
      <link>/docs/faq/what-are-the-continuous-pipe-demo-sites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/faq/what-are-the-continuous-pipe-demo-sites/</guid>
      <description>&lt;p&gt;ContinuousPipe provides some sample applications for common frameworks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/continuouspipe/demo-symfony&#34;&gt;Symfony&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/continuouspipe/demo-laravel&#34;&gt;Laravel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/continuouspipe/demo-drupal7&#34;&gt;Drupal 7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/continuouspipe/demo-drupal8&#34;&gt;Drupal 8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/continuouspipe/demo-magento1&#34;&gt;Magento 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/continuouspipe/demo-magento2&#34;&gt;Magento 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They can be used to get an environment running quickly or as a basis for further adaptation to suit the needs of your own organisation.&lt;/p&gt;

&lt;p&gt;The demo sites are built on top of &lt;a href=&#34;/docs/docs/faq/what-are-the-continuous-pipe-images/&#34;&gt;ContinuousPipe images&lt;/a&gt; so they take advantage of their security and performance best practices.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Console: Where can I get a ContinuousPipe API key?</title>
      <link>/docs/faq/where-can-I-get-a-continuous-pipe-api-key/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/faq/where-can-I-get-a-continuous-pipe-api-key/</guid>
      <description>

&lt;h2 id=&#34;continuouspipe-api-keys&#34;&gt;ContinuousPipe API Keys&lt;/h2&gt;

&lt;p&gt;ContinuousPipe API keys can be used with the &lt;code&gt;cp-remote&lt;/code&gt; tool in &lt;a href=&#34;/docs/docs/remote-development/working-with-different-environments/#interactive-mode&#34;&gt;interactive mode&lt;/a&gt; to access a bash terminal on a deployed container.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-continuouspipe-api-key&#34;&gt;Creating a ContinuousPipe API Key&lt;/h2&gt;

&lt;p&gt;You can generate a new API key in the account section of the console: &lt;a href=&#34;https://your-api.example.com/account/api-keys&#34;&gt;https://your-api.example.com/account/api-keys&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To create a new API key, enter a description in the &amp;ldquo;New key&amp;rdquo; form:&lt;/p&gt;


&lt;figure class=&#34;three-quarter-width&#34;&gt;
    
        &lt;img src=&#34;/docs/images/faq/account-api-key-new.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The new key will then be visible in list of keys:&lt;/p&gt;


&lt;figure class=&#34;three-quarter-width&#34;&gt;
    
        &lt;img src=&#34;/docs/images/faq/account-api-key-view.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;If you have already built a remote development environment using &lt;code&gt;cp-remote init &amp;lt;token&amp;gt;&lt;/code&gt; an API key will already have been generated for you and stored in the global configuration file &lt;code&gt;~/.cp-remote/config.yml&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Console: Where can I view container logs and events?</title>
      <link>/docs/faq/where-can-I-view-container-logs-and-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/faq/where-can-I-view-container-logs-and-events/</guid>
      <description>

&lt;h2 id=&#34;container-logs&#34;&gt;Container Logs&lt;/h2&gt;

&lt;p&gt;When a container is deployed, Kubernetes generates log and event information, which is useful for debugging when your deployments are failing. ContinuousPipe gives you access to this information in the console without having to access the container directly.&lt;/p&gt;

&lt;h2 id=&#34;viewing-the-container-logs-from-the-tide-log-screen&#34;&gt;Viewing the Container Logs From the Tide Log Screen&lt;/h2&gt;

&lt;p&gt;You can view the container logs and events from the tide log screen of a flow.&lt;/p&gt;

&lt;p&gt;First expand the tab for the container (referred to as component) you want to review, then click the hamburger icon of the container in the bottom right corner:&lt;/p&gt;


&lt;figure class=&#34;three-quarter-width&#34;&gt;
    
        &lt;img src=&#34;/docs/images/faq/flow-tide-logs-open-cp-logs.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;By default you will see the &amp;ldquo;LOGS&amp;rdquo; tab which displays a real time view of the container logs:&lt;/p&gt;


&lt;figure class=&#34;three-quarter-width&#34;&gt;
    
        &lt;img src=&#34;/docs/images/faq/flow-tide-logs-view-cp-logs.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;If you click on the &amp;ldquo;EVENTS&amp;rdquo; tab you will see a list of events associated with the container deployment:&lt;/p&gt;


&lt;figure class=&#34;three-quarter-width&#34;&gt;
    
        &lt;img src=&#34;/docs/images/faq/flow-tide-logs-view-cp-events.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;viewing-the-container-logs-from-the-environment-screen&#34;&gt;Viewing the Container Logs From the Environment Screen&lt;/h2&gt;

&lt;p&gt;You can also view the container logs and events from the environment screen of a flow.&lt;/p&gt;

&lt;p&gt;Click on the environment to expand it, then click the hamburger icon for the container (referred to as component) you want to review:&lt;/p&gt;


&lt;figure class=&#34;three-quarter-width&#34;&gt;
    
        &lt;img src=&#34;/docs/images/faq/flow-environment-open-cp-logs.png&#34; /&gt;
    
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>Configuration: How do I set environment variables?</title>
      <link>/docs/faq/how-do-I-set-environment-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/faq/how-do-I-set-environment-variables/</guid>
      <description>&lt;p&gt;You may want to change the behaviour of an application based on what environment it is deployed to. This can be done by changing the value of an environment variable passed to a container. For example you may want to set the &lt;code&gt;SYMFONY_ENV&lt;/code&gt; environment variable to &amp;ldquo;prod&amp;rdquo; for production, UAT and feature branch environments. We can do this by creating a variable within &lt;code&gt;continuous-pipe.yml&lt;/code&gt; and then using it as the value of the environment variable passed to the service.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;variables&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;SYMFONY_ENVIRONMENT&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;prod&lt;/span&gt;
 
&lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;deployment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;deploy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color: #ae81ff&#34;&gt;web&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                    &lt;span style=&#34;color: #ae81ff&#34;&gt;specification&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                        &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;
                        &lt;span style=&#34;color: #ae81ff&#34;&gt;environment_variables&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;SYMFONY_ENV&lt;/span&gt;
                              &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${SYMFONY_ENVIRONMENT}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the &lt;code&gt;variables&lt;/code&gt; section a &lt;code&gt;SYMFONY_ENVIRONMENT&lt;/code&gt; variable is created and assigned a value of &amp;ldquo;prod&amp;rdquo;. This variable then becomes available in the &lt;code&gt;tasks&lt;/code&gt; section where it is passed to the web service as the environment variable &lt;code&gt;SYMFONY_ENV&lt;/code&gt; (the local variable could also be called &amp;ldquo;SYMFONY_ENV&amp;rdquo; instead of &amp;ldquo;SYMFONY_ENVIRONMENT&amp;rdquo; but is different in this example to distinguish between the variable types).&lt;/p&gt;

&lt;p&gt;You can use conditions to set different values for the variable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;variables&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;SYMFONY_ENVIRONMENT&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;prod&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;condition&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;code_reference.branch in [&amp;quot;uat&amp;quot;, &amp;quot;production&amp;quot;]&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;SYMFONY_ENVIRONMENT&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;dev&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;condition&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;code_reference.branch not in [&amp;quot;uat&amp;quot;, &amp;quot;production&amp;quot;]&lt;/span&gt;
 
&lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;deployment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;deploy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color: #ae81ff&#34;&gt;web&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                    &lt;span style=&#34;color: #ae81ff&#34;&gt;specification&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                        &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;
                        &lt;span style=&#34;color: #ae81ff&#34;&gt;environment_variables&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;SYMFONY_ENV&lt;/span&gt;
                              &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${SYMFONY_ENVIRONMENT}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here &lt;code&gt;SYMFONY_ENVIRONMENT&lt;/code&gt; is set to &amp;ldquo;prod&amp;rdquo; for the &amp;ldquo;uat&amp;rdquo; and &amp;ldquo;production&amp;rdquo; branches only and &amp;ldquo;dev&amp;rdquo; for all others.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configuration: How do I control deployments using pull request labels?</title>
      <link>/docs/faq/how-do-I-control-deployments-using-pr-labels/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/faq/how-do-I-control-deployments-using-pr-labels/</guid>
      <description>&lt;p&gt;You may not want to deploy an environment every time a commit is pushed to a branch. One way of limiting this is to only deploy environments for branches with open pull requests. You can do this by putting a condition on tasks in &lt;code&gt;continuous-pipe.yml&lt;/code&gt; using a &lt;code&gt;filter&lt;/code&gt; expression.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color: #ae81ff&#34;&gt;images&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
          &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
          &lt;span style=&#34;color: #ae81ff&#34;&gt;expression&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;pull_request.number&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;0&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color: #ae81ff&#34;&gt;deployment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;deploy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
          &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
          &lt;span style=&#34;color: #ae81ff&#34;&gt;expression&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;pull_request.number&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;0&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With this configuration the &lt;code&gt;images&lt;/code&gt; and &lt;code&gt;deployment&lt;/code&gt; tasks will only run when a branch has a pull request open.&lt;/p&gt;

&lt;p&gt;You may also want to filter pull requests according to a particular label:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color: #ae81ff&#34;&gt;images&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
          &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
          &lt;span style=&#34;color: #ae81ff&#34;&gt;expression&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;quot;Ready&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;review&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;pull_request.labels&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color: #ae81ff&#34;&gt;deployment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;deploy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
          &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
          &lt;span style=&#34;color: #ae81ff&#34;&gt;expression&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;quot;Ready&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;review&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;pull_request.labels&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now the &lt;code&gt;images&lt;/code&gt; and &lt;code&gt;deployment&lt;/code&gt; tasks will only run when a branch has a pull request open which has a &amp;ldquo;Ready for review&amp;rdquo; label.&lt;/p&gt;

&lt;p&gt;You may want to exclude some branches from this restriction though, for example you may have &amp;ldquo;production&amp;rdquo; and &amp;ldquo;uat&amp;rdquo; branches that you want to deploy whenever there is a change. This can be done with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color: #ae81ff&#34;&gt;images&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
          &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
          &lt;span style=&#34;color: #ae81ff&#34;&gt;expression&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;code_reference.branch&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;[&amp;quot;uat&amp;quot;,&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;production&amp;quot;]&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;or&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Ready&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;review&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;pull_request.labels&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color: #ae81ff&#34;&gt;deployment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;deploy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
          &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
          &lt;span style=&#34;color: #ae81ff&#34;&gt;expression&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;code_reference.branch&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;[&amp;quot;uat&amp;quot;,&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;production&amp;quot;]&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;or&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Ready&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;review&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;pull_request.labels&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Configuration: How do I use &#34;defaults&#34; to reduce the duplication of configuration?</title>
      <link>/docs/faq/how-do-I-use-defaults-to-reduce-the-duplication-of-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/faq/how-do-I-use-defaults-to-reduce-the-duplication-of-configuration/</guid>
      <description>&lt;p&gt;In the following example the definition of the &lt;code&gt;cluster&lt;/code&gt; and environment &lt;code&gt;name&lt;/code&gt; variables are duplicated across tasks:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;initialise&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;cluster&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${CLUSTER}&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;environment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;quot;sfdemo-&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;code_reference.branch&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;
   &lt;span style=&#34;color: #ae81ff&#34;&gt;deployments&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;deploy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;cluster&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${CLUSTER}&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;environment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;quot;sfdemo-&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;code_reference.branch&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can avoid this duplication by defining them outside the &lt;code&gt;tasks&lt;/code&gt; section in a separate &lt;code&gt;defaults&lt;/code&gt; section:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;defaults&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
     &lt;span style=&#34;color: #ae81ff&#34;&gt;cluster&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${CLUSTER}&lt;/span&gt;
     &lt;span style=&#34;color: #ae81ff&#34;&gt;environment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;quot;sfdemo-&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;code_reference.branch&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;initialise&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;deployments&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;deploy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;cluster&lt;/code&gt; and environment &lt;code&gt;name&lt;/code&gt; values will now be set for both the &lt;code&gt;initialise&lt;/code&gt; and &lt;code&gt;deployments&lt;/code&gt; tasks within the &lt;code&gt;tasks&lt;/code&gt; section.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configuration: How do I use &#34;pipelines&#34; to simplify the configuration?</title>
      <link>/docs/faq/how-do-I-use-pipelines-to-simplify-the-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/faq/how-do-I-use-pipelines-to-simplify-the-configuration/</guid>
      <description>&lt;p&gt;You can use variable conditions and task filters to change behaviour based on which branch/environment is being deployed. This can lead to the conditions/filters being repeated in lots of places within the &lt;code&gt;continuous-pipe.yml&lt;/code&gt; file. This can be cleaned up using pipelines.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;variables&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;
&lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;images&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;migrations&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;deployment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;
        
&lt;span style=&#34;color: #ae81ff&#34;&gt;pipelines&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;Production&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;condition&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;code_reference.branch&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;[&amp;quot;uat&amp;quot;,&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;production&amp;quot;]&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;Features&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;condition&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;quot;Ready&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;review&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;pull_request.labels&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;Remote&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;condition&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;code_reference.branch&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;matches&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/^cpdev/&amp;quot;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This sets up three pipelines, one for the &amp;ldquo;production&amp;rdquo; and &amp;ldquo;uat&amp;rdquo; branches, one for branches with an open pull request with the &amp;ldquo;Ready for review&amp;rdquo; label and one for remote development branches.&lt;/p&gt;

&lt;p&gt;You can now specify which tasks to run for these pipelines:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;variables&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;

&lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;images&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;migrations&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;deployment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;
        
&lt;span style=&#34;color: #ae81ff&#34;&gt;pipelines&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;Production&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;condition&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;code_reference.branch&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;[&amp;quot;uat&amp;quot;,&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;production&amp;quot;]&amp;#39;&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;images,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;deployment&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;Features&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;condition&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;quot;Ready&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;review&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;pull_request.labels&amp;#39;&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;images,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;migrations,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;deployment&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;Remote&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;condition&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;code_reference.branch&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;matches&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/^cpdev/&amp;quot;&amp;#39;&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;images,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;migrations,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;deployment&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here the &lt;code&gt;migrations&lt;/code&gt; task would not be run automatically for &amp;ldquo;production&amp;rdquo; and &amp;ldquo;uat&amp;rdquo; branches as they are configured to use the &lt;code&gt;Production&lt;/code&gt; pipeline. If a commit is pushed that doesn&amp;rsquo;t match any of these pipelines then no tasks will be run.&lt;/p&gt;

&lt;p&gt;You can also specify the values of variables using pipelines:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;variables&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;SYMFONY_ENV&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;prod&lt;/span&gt;

&lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;images&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;migrations&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;deployment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;
        
&lt;span style=&#34;color: #ae81ff&#34;&gt;pipelines&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;Production&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;condition&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;code_reference.branch&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;[&amp;quot;uat&amp;quot;,&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;production&amp;quot;]&amp;#39;&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;images,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;deployment&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;Features&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;condition&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;quot;Ready&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;review&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;pull_request.labels&amp;#39;&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;images,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;migrations,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;deployment&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;Remote&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;condition&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;code_reference.branch&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;matches&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/^cpdev/&amp;quot;&amp;#39;&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;images,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;migrations,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;deployment&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;variables&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;SYMFONY_ENV&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;dev&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here the &lt;code&gt;SYMFONY_ENV&lt;/code&gt; variable is set to &amp;ldquo;prod&amp;rdquo; in the standard variables section but has its value overridden to &amp;ldquo;dev&amp;rdquo; just for the &amp;ldquo;Remote&amp;rdquo; pipeline.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configuration: How do I use Composer with GitHub personal access token?</title>
      <link>/docs/faq/how-do-I-use-composer-with-github-access-token/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/faq/how-do-I-use-composer-with-github-access-token/</guid>
      <description>&lt;p&gt;If you need to download private repositories from GitHub during the build process, an access token has to be available during &lt;code&gt;composer install&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you are using one of the &lt;a href=&#34;/docs/docs/faq/what-are-the-continuous-pipe-images/&#34;&gt;ContinuousPipe images&lt;/a&gt; then you can pass the image a GitHub token using the &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; environment variable. During the build process the image will then run &lt;code&gt;composer global config github-oauth.github.com &amp;quot;$GITHUB_TOKEN&amp;quot;&lt;/code&gt; which will then allow subsequent composer commands permission to access the private repository.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;images&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color: #ae81ff&#34;&gt;api&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                    &lt;span style=&#34;color: #ae81ff&#34;&gt;environment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                        &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;GITHUB_TOKEN&lt;/span&gt;
                          &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${GITHUB_TOKEN}&lt;/span&gt;

            &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here the &lt;code&gt;api&lt;/code&gt; service is passed &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; as an environment variable, with the value being passed in as a variable to keep it out of version control. This needs to be set on the &lt;a href=&#34;/docs/docs/quick-start/configuring-a-flow/&#34;&gt;configuration page for the flow&lt;/a&gt; in the ContinuousPipe console.&lt;/p&gt;

&lt;p&gt;By setting up these build arguments, the &lt;code&gt;Dockerfile&lt;/code&gt; will able to consume the &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; variable using a Docker ARG, as described in the ContinuousPipe image documentation for &lt;a href=&#34;https://github.com/continuouspipe/dockerfiles/tree/master/php-apache#php-70-base&#34;&gt;Apache&lt;/a&gt; or &lt;a href=&#34;https://github.com/continuouspipe/dockerfiles/tree/master/php-nginx#php-nginx&#34;&gt;Nginx&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;admonition warning&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Warning&lt;/p&gt;
&lt;p&gt;The token can be added as either a Docker build argument or an environment variable. When it is passed as a build argument, the token will be visible in the image history (see &lt;code&gt;docker history &amp;lt;image-name&amp;gt;&lt;/code&gt; command). When it is given as an environment variable, the token is added to the image itself (see &lt;code&gt;docker inspect --format &#39;{{ index (index .Config.Env) }}&#39; &amp;lt;image-name&amp;gt;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;With all of these methods of exposing the token, the final Docker image should be pushed into a private Docker repository to avoid leaking the Github token.&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;When you build the image locally with Docker Compose, then create an environment variable in your shell like &lt;code&gt;export GITHUB_TOKEN=...&lt;/code&gt;. See the &lt;a href=&#34;https://docs.docker.com/compose/compose-file/#args&#34;&gt;args section&lt;/a&gt; of Docker Compose file reference for more details.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Configuration: How do I add basic HTTP authentication to an application?</title>
      <link>/docs/faq/how-do-I-add-basic-http-authentication-to-an-application/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/faq/how-do-I-add-basic-http-authentication-to-an-application/</guid>
      <description>&lt;p&gt;Publicly exposed endpoints are accessible to anyone by default. If you are using one of the &lt;a href=&#34;/docs/docs/faq/what-are-the-continuous-pipe-images/&#34;&gt;ContinuousPipe images&lt;/a&gt; for &lt;a href=&#34;https://github.com/continuouspipe/dockerfiles/tree/master/php-apache#basic-authentication&#34;&gt;Apache&lt;/a&gt; or &lt;a href=&#34;https://github.com/continuouspipe/dockerfiles/tree/master/php-nginx#basic-authentication&#34;&gt;Nginx&lt;/a&gt; then you can enable basic auth using environment variables:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
   &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;
   &lt;span style=&#34;color: #ae81ff&#34;&gt;deployment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
       &lt;span style=&#34;color: #ae81ff&#34;&gt;deploy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
           &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;
           &lt;span style=&#34;color: #ae81ff&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
               &lt;span style=&#34;color: #ae81ff&#34;&gt;web&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                   &lt;span style=&#34;color: #ae81ff&#34;&gt;specification&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                       &lt;span style=&#34;color: #ae81ff&#34;&gt;environment_variables&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                           &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;AUTH_HTTP_ENABLED&lt;/span&gt;
                             &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;true&lt;/span&gt;
                           &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;AUTH_HTTP_HTPASSWD&lt;/span&gt;
                             &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${AUTH_HTTP_HTPASSWD}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here the value of &lt;code&gt;AUTH_HTTP_HTPASSWD&lt;/code&gt; is being passed in as a variable to keep it out of version control, this needs to be set on the &lt;a href=&#34;/docs/docs/quick-start/configuring-a-flow/&#34;&gt;configuration page for the flow&lt;/a&gt; in the ContinuousPipe console.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configuration: How do I override tasks in pipelines?</title>
      <link>/docs/faq/how-do-I-override-tasks-in-pipelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/faq/how-do-I-override-tasks-in-pipelines/</guid>
      <description>&lt;p&gt;You may want to change the way certain tasks are run according to the environment. You could achieve this by defining separate tasks per pipeline, however this runs the risk of introducing a lot of duplication. To avoid excessive duplication ContinuousPipe allows you to override some or all of a task definition.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;deployment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;deploy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
               &lt;span style=&#34;color: #ae81ff&#34;&gt;web&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                   &lt;span style=&#34;color: #ae81ff&#34;&gt;specification&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                       &lt;span style=&#34;color: #ae81ff&#34;&gt;environment_variables&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                           &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;WEB_HTTP&lt;/span&gt;
                             &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;true&lt;/span&gt;
                           &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;WEB_HTTPS&lt;/span&gt;
                             &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;false&lt;/span&gt;
        
&lt;span style=&#34;color: #ae81ff&#34;&gt;pipelines&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;Production&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;condition&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;code_reference.branch == &amp;#39;master&amp;#39;&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;deployment&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;Uat&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;condition&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;code_reference.branch != &amp;#39;master&amp;#39;&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;deployment&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This configuration sets up a &lt;code&gt;deployment&lt;/code&gt; task that disables HTTPS traffic, then defines two pipelines called &lt;code&gt;Production&lt;/code&gt; and &lt;code&gt;Uat&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;deployment&lt;/code&gt; task can now be overidden within the pipeline section by &amp;ldquo;importing&amp;rdquo; the task:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;deployment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;deploy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
               &lt;span style=&#34;color: #ae81ff&#34;&gt;web&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                   &lt;span style=&#34;color: #ae81ff&#34;&gt;specification&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                       &lt;span style=&#34;color: #ae81ff&#34;&gt;environment_variables&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                           &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;WEB_HTTP&lt;/span&gt;
                             &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;true&lt;/span&gt;
                           &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;WEB_HTTPS&lt;/span&gt;
                             &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;false&lt;/span&gt;
        
&lt;span style=&#34;color: #ae81ff&#34;&gt;pipelines&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;Production&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;condition&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;code_reference.branch == &amp;#39;master&amp;#39;&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;imports&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;deployment&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;deploy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color: #ae81ff&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                    &lt;span style=&#34;color: #ae81ff&#34;&gt;web&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                        &lt;span style=&#34;color: #ae81ff&#34;&gt;specification&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                            &lt;span style=&#34;color: #ae81ff&#34;&gt;environment_variables&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                                &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;WEB_HTTPS&lt;/span&gt;
                                  &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;true&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;Uat&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;condition&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;code_reference.branch != &amp;#39;master&amp;#39;&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;imports&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;deployment&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;deploy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color: #ae81ff&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                   &lt;span style=&#34;color: #ae81ff&#34;&gt;web&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                       &lt;span style=&#34;color: #ae81ff&#34;&gt;specification&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                           &lt;span style=&#34;color: #ae81ff&#34;&gt;environment_variables&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                               &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;WEB_HTTP_PORT&lt;/span&gt;
                                 &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;8080&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For the &lt;code&gt;Production&lt;/code&gt; pipeline HTTPS traffic is enabled, and for the &lt;code&gt;Uat&lt;/code&gt; pipeline HTTPS remains disabled, however the HTTP web port is changed from the default 80 to 8080.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configuration: How do I set up manual approval of deployments?</title>
      <link>/docs/faq/how-do-I-set-up-manual-approval-of-deployments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/faq/how-do-I-set-up-manual-approval-of-deployments/</guid>
      <description>&lt;p&gt;You may want to introduce a manual approval step into your deployment process as an added precaution against unintentional or unauthorised deployments. This can be done by adding a &lt;code&gt;manual_approval&lt;/code&gt; task.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;images&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;wait_product_owner&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
         &lt;span style=&#34;color: #ae81ff&#34;&gt;manual_approval&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;~&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;deployment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;

&lt;span style=&#34;color: #ae81ff&#34;&gt;pipelines&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;Production&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;condition&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;code_reference.branch&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;[&amp;quot;uat&amp;quot;,&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;production&amp;quot;]&amp;#39;&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;images&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;wait_product_owner&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;deployment&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;Features&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;condition&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;quot;Ready&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;review&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;pull_request.labels&amp;#39;&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;images,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;deployment&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this configuration the &lt;code&gt;Features&lt;/code&gt; pipeline will start a tide which will run the &lt;code&gt;images&lt;/code&gt; and &lt;code&gt;deployment&lt;/code&gt; tasks automatically. However, the &lt;code&gt;Production&lt;/code&gt; pipeline will start a tide which will run the &lt;code&gt;images&lt;/code&gt; task, then pause until approval is granted. This is done in the ContinuousPipe console by clicking on the paused tide and clicking &amp;ldquo;APPROVE&amp;rdquo;, which will cause the tide to resume and run the &lt;code&gt;deployment&lt;/code&gt; task:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/docs/images/configuration/flow-manual-approval.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configuration: How do I create a readiness check when deploying services?</title>
      <link>/docs/faq/how-do-I-define-a-readiness-check-when-deploying-services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/faq/how-do-I-define-a-readiness-check-when-deploying-services/</guid>
      <description>&lt;p&gt;Sometimes a service is not immediately available - it may need to load configuration or import data, taking several minutes before it is ready. In this situation you can define a &lt;code&gt;readiness_probe&lt;/code&gt; to ensure that the availability of the service is deferred until any setup routines are finished.&lt;/p&gt;

&lt;p&gt;Sometimes your container won&amp;rsquo;t be listening on the relevant port by the time the readiness probe runs but you will still want to check that it is functioning. A good idea would be to check that a file can be created in a directory such as /tmp (see varnish example).&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;images&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;deployment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;deploy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color: #ae81ff&#34;&gt;web&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                    &lt;span style=&#34;color: #ae81ff&#34;&gt;deployment_strategy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                        &lt;span style=&#34;color: #ae81ff&#34;&gt;readiness_probe&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                            &lt;span style=&#34;color: #ae81ff&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;http&lt;/span&gt;
                            &lt;span style=&#34;color: #ae81ff&#34;&gt;port&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;80&lt;/span&gt;
                            &lt;span style=&#34;color: #ae81ff&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;/&lt;/span&gt;
                &lt;span style=&#34;color: #ae81ff&#34;&gt;mysql&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                    &lt;span style=&#34;color: #ae81ff&#34;&gt;deployment_strategy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                        &lt;span style=&#34;color: #ae81ff&#34;&gt;readiness_probe&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                            &lt;span style=&#34;color: #ae81ff&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;tcp&lt;/span&gt;
                            &lt;span style=&#34;color: #ae81ff&#34;&gt;port&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3306&lt;/span&gt;
                &lt;span style=&#34;color: #ae81ff&#34;&gt;varnish&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                    &lt;span style=&#34;color: #ae81ff&#34;&gt;deployment_strategy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                        &lt;span style=&#34;color: #ae81ff&#34;&gt;readiness_probe&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                            &lt;span style=&#34;color: #ae81ff&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;exec&lt;/span&gt;
                            &lt;span style=&#34;color: #ae81ff&#34;&gt;command&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                                &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;touch&lt;/span&gt;
                                &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;/tmp/healthy&lt;/span&gt;
                            &lt;span style=&#34;color: #ae81ff&#34;&gt;initial_delay_seconds&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt;
                            &lt;span style=&#34;color: #ae81ff&#34;&gt;period_seconds&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt;
                            &lt;span style=&#34;color: #ae81ff&#34;&gt;success_threshold&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;
                            &lt;span style=&#34;color: #ae81ff&#34;&gt;failure_threshold&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This configuration defines a readiness check on each of the &lt;code&gt;web&lt;/code&gt; and &lt;code&gt;mysql&lt;/code&gt; services. The &lt;code&gt;web&lt;/code&gt; readiness check probes using HTTP on port 80 and the &lt;code&gt;mysql&lt;/code&gt; readiness check probes using TCP on port 3306. Until both of these readiness checks receive a 200 status the pod will not receive any traffic through Kubernetes.&lt;/p&gt;

&lt;p&gt;The Kubernetes documentation has more information on &lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#defining-readiness-probes&#34;&gt;readiness probes&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configuration: How do I get the deployed endpoint address for a service?</title>
      <link>/docs/faq/how-do-I-get-the-deployed-endpoint-address-for-a-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/faq/how-do-I-get-the-deployed-endpoint-address-for-a-service/</guid>
      <description>&lt;p&gt;You may have a complex script that contains several &lt;code&gt;deploy&lt;/code&gt; tasks, each creating their own endpoint. To inform subsequent services about a previous endpoint address ContinuousPipe creates a dynamic variable using the service name. So, for example, if a service called &lt;code&gt;api&lt;/code&gt; was created by a &lt;code&gt;deploy&lt;/code&gt; task, then the endpoint address would become available to subsequent tasks as &lt;code&gt;${SERVICE_API_PUBLIC_ENDPOINT}&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;infrastructure&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;deploy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;cluster&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${CLUSTER}&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color: #ae81ff&#34;&gt;backend&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                    &lt;span style=&#34;color: #ae81ff&#34;&gt;specification&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                        &lt;span style=&#34;color: #ae81ff&#34;&gt;source&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                            &lt;span style=&#34;color: #ae81ff&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${IMAGE_PATH_BACKEND}&lt;/span&gt;

    &lt;span style=&#34;color: #ae81ff&#34;&gt;application&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;deploy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;cluster&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${CLUSTER}&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color: #ae81ff&#34;&gt;frontend&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                    &lt;span style=&#34;color: #ae81ff&#34;&gt;specification&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                        &lt;span style=&#34;color: #ae81ff&#34;&gt;source&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                            &lt;span style=&#34;color: #ae81ff&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${IMAGE_PATH_FRONTEND}&lt;/span&gt;
                        &lt;span style=&#34;color: #ae81ff&#34;&gt;environment_variables&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;BACKEND_ENDPOINT&lt;/span&gt;
                              &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${SERVICE_BACKEND_PUBLIC_ENDPOINT}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This configuration defines an initial &lt;code&gt;deploy&lt;/code&gt; task that creates a &lt;code&gt;backend&lt;/code&gt; service. The second &lt;code&gt;deploy&lt;/code&gt; task creates a &lt;code&gt;frontend&lt;/code&gt; service that passes the endpoint address of the &lt;code&gt;backend&lt;/code&gt; service as an environment variable &lt;code&gt;BACKEND_ENDPOINT&lt;/code&gt; using the dynamic variable &lt;code&gt;${SERVICE_BACKEND_PUBLIC_ENDPOINT}&lt;/code&gt; as the value.&lt;/p&gt;

&lt;p&gt;Additionally, the value of &lt;code&gt;CLUSTER&lt;/code&gt;, &lt;code&gt;IMAGE_PATH_BACKEND&lt;/code&gt; and &lt;code&gt;IMAGE_PATH_FRONTEND&lt;/code&gt; are being passed in as variables - these need to be set on the &lt;a href=&#34;/docs/docs/quick-start/configuring-a-flow/&#34;&gt;configuration page for the flow&lt;/a&gt; in the ContinuousPipe console.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>