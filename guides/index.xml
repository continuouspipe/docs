<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guides on ContinuousPipe Docs</title>
    <link>/docs/guides/index.xml</link>
    <description>Recent content in Guides on ContinuousPipe Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>Released under the MIT license</copyright>
    <atom:link href="/docs/guides/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Getting Started with Laravel</title>
      <link>/docs/guides/laravel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/guides/laravel/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this tutorial we are going to setup a new Laravel project, run it within Docker using one of ContinuousPipe’s base Dockerfiles, then finally push our project to our GitHub repo where ContinuousPipe will build our project and deploy on Google Container Engine. Once we are happy our project is building successfully we will then use ContinuousPipe to manage our cloud based development environment with the &lt;code&gt;cp-remote&lt;/code&gt; CLI tool.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;Before getting started you will need the following -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; or &lt;a href=&#34;https://bitbucket.org/&#34;&gt;Bitbucket&lt;/a&gt; account to host your Laravel project&lt;/li&gt;
&lt;li&gt;A &lt;a href=&#34;https://continuouspipe.github.io/&#34;&gt;ContinuousPipe&lt;/a&gt; account&lt;/li&gt;
&lt;li&gt;A Kubernetes cluster e.g. &lt;a href=&#34;https://aws.amazon.com/&#34;&gt;AWS&lt;/a&gt;, &lt;a href=&#34;https://cloud.google.com/container-engine/&#34;&gt;GCE&lt;/a&gt; or &lt;a href=&#34;https://azure.microsoft.com/en-au/&#34;&gt;Azure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A Docker Registry account e.g. &lt;a href=&#34;https://docker.io&#34;&gt;docker.io&lt;/a&gt; or &lt;a href=&#34;https://quay.io&#34;&gt;quay.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;setting-up-laravel&#34;&gt;Setting up Laravel&lt;/h2&gt;

&lt;p&gt;The easiest way to install Laravel is with the Laravel installer, if you don’t have this you can simply follow the instructions to use composer instead. For simplicity we will use the Laravel installer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ laravel new demo-laravel
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since we used the Laravel installer, a &lt;code&gt;.env&lt;/code&gt; file has been created for us and an application key has been set i.e.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;APP_KEY&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;base64:OQ8H9vjocvQh284ojDBrODQ2HkrgWGDvdLCaQniHz0M&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;During our deployments, Laravel needs this key after the composer install runs due to the post-install composer hook. Unfortunately we will not have a &lt;code&gt;.env&lt;/code&gt; file set at this point so the easiest way to by pass this would be to set a default &lt;code&gt;APP_KEY.&lt;/code&gt; Within &lt;code&gt;config/app.php&lt;/code&gt; change line 106&lt;/p&gt;

&lt;p&gt;from -&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;key&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;env&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;APP_KEY&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to -&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;key&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;env&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;APP_KEY&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;base64:OQ8H9vjocvQh284ojDBrODQ2HkrgWGDvdLCaQniHz0M=&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We will overwrite the default key during deployments.&lt;/p&gt;

&lt;p&gt;Since we are going to configure our application to use redis for our cache and session storage we need to add the package &lt;code&gt;predis/predis&lt;/code&gt; to our project.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ composer require predis/predis
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;configuring-continuouspipe&#34;&gt;Configuring ContinuousPipe&lt;/h2&gt;

&lt;p&gt;Before we can push any code to our repository, we need to ensure that the ContinuousPipe console is properly configured. Please refer to the ContinuousPipe Quick Start guide to setup your &lt;a href=&#34;/docs/docs/quick-start/creating-a-project/&#34;&gt;project&lt;/a&gt;, &lt;a href=&#34;/docs/docs/quick-start/configuring-a-cluster/&#34;&gt;cluster&lt;/a&gt;, &lt;a href=&#34;/docs/docs/quick-start/configuring-a-registry/&#34;&gt;registry&lt;/a&gt; and create your first &lt;a href=&#34;/docs/docs/quick-start/creating-a-flow/&#34;&gt;flow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One last thing we need to do before we can begin using ContinuousPipe is configure which cluster we will use. You are free to configure as many clusters as you wish, in fact, its a good idea to have a separate cluster from production as you would for development and testing.&lt;/p&gt;

&lt;p&gt;For now we have only got one cluster configured in ContinuousPipe. Lets assign that cluster name “main-cluster” to an environment variable which can be used with our build and deployment tasks.&lt;/p&gt;

&lt;p&gt;From within the flow, click on configuration in the sidebar, create a new environment variable named &lt;code&gt;CLUSTER&lt;/code&gt; with a value to match what you set as your cluster name/identifier. I have set my cluster name as &lt;code&gt;main-cluster&lt;/code&gt;. Finally save the configuration.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/docs/docs/images/guides/laravel/flow-variables-configuration.png&#34; alt=&#34;Flow Configuration&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;adding-docker-configuration&#34;&gt;Adding Docker configuration&lt;/h3&gt;

&lt;p&gt;Lets start by configuring our &lt;code&gt;Dockerfile&lt;/code&gt;. We are going to use one of the &lt;a href=&#34;/docs/docs/faq/what-are-the-continuous-pipe-images/&#34;&gt;ContinuousPipe images&lt;/a&gt; as our base. In reality, you would want to create a new base image that would extend this image to give you the ability to add other services, such as your NodeJS dependencies often used for the frontend build tools i.e. webpack&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt; quay.io/continuouspipe/php7-nginx:stable&lt;/span&gt;

COPY ./tools/docker/usr/ /usr/

USER build

&lt;span style=&#34;color: #75715e&#34;&gt;# Add the application&lt;/span&gt;
COPY . /app
&lt;span style=&#34;color: #66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt; /app&lt;/span&gt;

USER root

&lt;span style=&#34;color: #75715e&#34;&gt;# Install dependencies&lt;/span&gt;
ARG &lt;span style=&#34;color: #f8f8f2&#34;&gt;APP_ENV&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;RUN&lt;/span&gt; chown -R build:build /app &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt; -n &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$APP_ENV&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;then&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
    bash /app/tools/docker/setup/install.sh&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;You will notice from the second line of our Dockerfile that it will copy &lt;code&gt;tools/docker/usr/&lt;/code&gt; to &lt;code&gt;/usr/&lt;/code&gt; This is put in place by the inheritance of the configuration from our base image. Its parent image, &lt;a href=&#34;https://github.com/continuouspipe/dockerfiles/tree/master/ubuntu/16.04#default-environment-variables&#34;&gt;Ubuntu Base&lt;/a&gt; allows us to inject custom environment variables into our container at build time. This allows us to easily manipulate how the build is configured. For example, we can use these to define our web directory which is used to set the nginx vhost &lt;code&gt;root&lt;/code&gt; configuration.&lt;/p&gt;

&lt;h3 id=&#34;setting-additional-docker-required-files&#34;&gt;Setting additional Docker required files&lt;/h3&gt;

&lt;p&gt;Lets create a new file in &lt;code&gt;tools/docker/usr/local/bin/supervisor_custom_start-laravel&lt;/code&gt; with the following -&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;tools/docker/usr/local/bin/supervisor_custom_start-laravel&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#!/bin/bash&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Bring in the as_code_owner function, to run commands as the user who owns the code.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# Usually the &amp;quot;build&amp;quot; user.&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;source&lt;/span&gt; /usr/local/share/bootstrap/common_functions.sh

bash /app/tools/docker/setup/install.sh

&lt;span style=&#34;color: #75715e&#34;&gt;# Create env file if missing&lt;/span&gt;
bash /app/tools/docker/setup/setup-dotenv.sh

&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$REMOTE_ENV&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;then&lt;/span&gt;
  as_code_owner &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;php artisan key:generate&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;The comments should make it clear what each line does however, there are few additional files included in this script we need to create. First is our &lt;code&gt;install.sh&lt;/code&gt; script, this will do our initial folder setup, run composer install and then set the correct file and folder permissions across our project.&lt;/p&gt;

&lt;p&gt;The second included script is used to create our &lt;code&gt;.env&lt;/code&gt; file from our environment variables. Even though technically Laravel can read our environment variables directly, the file needs to exist to generate a new key as Laravel will save the generated key to this file.&lt;/p&gt;

&lt;p&gt;Lets add these files into &lt;code&gt;tools/docker/setup&lt;/code&gt; -&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;tools/docker/setup/install.sh&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#!/bin/bash&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;set&lt;/span&gt; -xe

&lt;span style=&#34;color: #75715e&#34;&gt;# Source variables such as what user the site will be running as&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;source&lt;/span&gt; /usr/local/share/bootstrap/setup.sh

&lt;span style=&#34;color: #75715e&#34;&gt;# Bring in the composer running function&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;source&lt;/span&gt; /usr/local/share/php/common_functions.sh

&lt;span style=&#34;color: #f8f8f2&#34;&gt;APP_PATH&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/app&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Create missing directories&lt;/span&gt;
/app/tools/docker/setup/setup-directories.sh

&lt;span style=&#34;color: #75715e&#34;&gt;# Install the app&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;APP_PATH&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

run_composer

chown -R &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;CODE_OWNER&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}:${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;APP_GROUP&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt; bootstrap/cache/ storage
chmod -R ug+rw,o-w bootstrap/cache/ storage/
chmod +x storage
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;tools/docker/setup/setup-dotenv.sh&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#!/bin/sh&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;set&lt;/span&gt; -xe

&lt;span style=&#34;color: #f8f8f2&#34;&gt;ENV_FILE&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/app/.env&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt; ! -f &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$ENV_FILE&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;then&lt;/span&gt;
  touch &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$ENV_FILE&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;APP_ENV=${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;APP_ENV&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;production&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;APP_KEY=${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;APP_KEY&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;base64:OQ8H9vjocvQh284ojDBrODQ2HkrgWGDvdLCaQniHz0M=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;APP_DEBUG=${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;APP_DEBUG&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;APP_URL=${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;APP_URL&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;https://laravel-demo.dev&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;DB_CONNECTION=${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_CONNECTION&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;mysql&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;DB_HOST=${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_HOST&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;database&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;DB_PORT=${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_PORT&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;3306&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;DB_DATABASE=${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_DATABASE&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;laravel&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;DB_USERNAME=${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_USERNAME&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;laravel&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;DB_PASSWORD=${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_PASSWORD&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;laravel&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;MAIL_DRIVER=${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;MAIL_DRIVER&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;smtp&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;MAIL_HOST=${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;MAIL_HOST&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;mailtrap.io&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;MAIL_PORT=${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;MAIL_PORT&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;2525&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;MAIL_USERNAME=${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;MAIL_USERNAME&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;MAIL_PASSWORD=${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;MAIL_PASSWORD&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;MAIL_ENCRYPTION=${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;MAIL_ENCRYPTION&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;CACHE_DRIVER=${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;CACHE_DRIVER&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;redis&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;SESSION_DRIVER=${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SESSION_DRIVER&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;redis&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;QUEUE_DRIVER=${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;QUEUE_DRIVER&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;database&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;REDIS_HOST=${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;REDIS_HOST&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;redis&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;REDIS_PASSWORD=${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;REDIS_PASSWORD&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;REDIS_PORT=${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;REDIS_PORT&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;6379&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt; &amp;gt;&amp;gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ENV_FILE&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Allow the web server user to read this file in, and the build user to run `php artisan key:generate`&lt;/span&gt;
chown &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;CODE_OWNER&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;:&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;APP_GROUP&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ENV_FILE&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;
chmod &lt;span style=&#34;color: #ae81ff&#34;&gt;640&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ENV_FILE&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;Included from the &lt;code&gt;install.sh&lt;/code&gt; file is -&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;tools/docker/setup/setup-directories.sh&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#!/bin/sh&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;set&lt;/span&gt; -xe

&lt;span style=&#34;color: #f8f8f2&#34;&gt;APP_PATH&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/app&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Create new directories&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;PUBLIC_DIR&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;APP_PATH&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}/public&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;STORAGE_DIR&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;APP_PATH&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}/storage&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;FRAMEWORK_DIR&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;STORAGE_DIR&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}/framework&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;CACHE_DIR&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;FRAMEWORK_DIR&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}/cache&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;VIEWS_DIR&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;FRAMEWORK_DIR&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}/views&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;SESSIONS_DIR&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;FRAMEWORK_DIR&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}/sessions&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Create missing storage directories&lt;/span&gt;
mkdir -p &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PUBLIC_DIR&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
mkdir -p &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;STORAGE_DIR&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
mkdir -p &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;FRAMEWORK_DIR&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
mkdir -p &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;CACHE_DIR&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
mkdir -p &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;VIEWS_DIR&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
mkdir -p &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SESSIONS_DIR&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lets now create our custom environment variables file -&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;tools/docker/usr/local/share/env/20-project&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#!/bin/bash&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;WORK_DIRECTORY&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;WORK_DIRECTORY&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;/app&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;WEB_DIRECTORY&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;WEB_DIRECTORY&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;WORK_DIRECTORY&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;/public&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;STORAGE_DIR&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;STORAGE_DIR&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;WORK_DIRECTORY&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;/storage&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;UPLOADS_DIR&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;UPLOADS_DIR&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;STORAGE_DIR&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;/app/public/uploads&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;FRAMEWORK_DIR&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;FRAMEWORK_DIR&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;STORAGE_DIR&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;/framework&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;CACHE_DIR&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;CACHE_DIR&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;FRAMEWORK_DIR&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;/cache&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;VIEWS_DIR&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;VIEWS_DIR&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;FRAMEWORK_DIR&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;/views&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SESSIONS_DIR&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;CACHE_DIR&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SESSIONS_DIR&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;/sessions&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;APP_ENV&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;APP_ENV&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;production&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;APP_KEY&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;APP_KEY&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;base64:OQ8H9vjocvQh284ojDBrODQ2HkrgWGDvdLCaQniHz0M=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;APP_DEBUG&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;APP_DEBUG&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;APP_URL&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;APP_URL&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;https://laravel-demo.dev&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_CONNECTION&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_CONNECTION&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;mysql&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_HOST&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_HOST&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;database&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_PORT&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_PORT&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;3306&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_DATABASE&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_DATABASE&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;laravel&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_USERNAME&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_USERNAME&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;laravel&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_PASSWORD&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_PASSWORD&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;laravel&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MAIL_DRIVER&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;MAIL_DRIVER&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;smtp&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MAIL_HOST&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;MAIL_HOST&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;mailtrap.io&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MAIL_PORT&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;MAIL_PORT&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;2525&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MAIL_USERNAME&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;MAIL_USERNAME&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MAIL_PASSWORD&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;MAIL_PASSWORD&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;MAIL_ENCRYPTION&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;MAIL_ENCRYPTION&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;CACHE_DRIVER&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;CACHE_DRIVER&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;redis&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SESSION_DRIVER&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SESSION_DRIVER&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;redis&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;QUEUE_DRIVER&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;QUEUE_DRIVER&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;database&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;REDIS_HOST&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;REDIS_HOST&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;redis&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;REDIS_PASSWORD&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;REDIS_PASSWORD&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;REDIS_PORT&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;REDIS_HOST_PORT&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;6379&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the majority of this file we are setting environment variables using the default Laravel variables found in the &lt;code&gt;.env&lt;/code&gt; file, with a few extras and one exception. The &lt;code&gt;REDIS_PORT&lt;/code&gt; being set is looking for an injected variable &lt;code&gt;REDIS_HOST_PORT&lt;/code&gt;. This is to mitigate the issue where &lt;code&gt;SERVICENAME_PORT&lt;/code&gt; is a reserved keyword in &lt;code&gt;docker-compose&lt;/code&gt; which ultimately sets the &lt;code&gt;redis&lt;/code&gt; connection to &lt;code&gt;tcp://ip.ad.dr.ress:port&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For more information on how the custom environment variables are loaded please refer to the main base image &lt;a href=&#34;https://github.com/continuouspipe/dockerfiles/tree/master/ubuntu/16.04#default-environment-variables&#34;&gt;readme&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The only thing left to do for our Docker configuration is to setup our &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;docker-compose.yml&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;version&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #ae81ff&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;web&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;context&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;.&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;APP_ENV&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;links&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;database&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;redis&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;expose&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;80&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;443&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;ports&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;80:80&amp;quot;&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;443:443&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;volumes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;.:/app&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;environment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
          &lt;span style=&#34;color: #ae81ff&#34;&gt;APP_USER_LOCAL&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;

    &lt;span style=&#34;color: #ae81ff&#34;&gt;database&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;quay.io/continuouspipe/mysql5.7:stable&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;environment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;laravel&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;laravel&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;MYSQL_USER&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;laravel&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;MYSQL_PASSWORD&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;laravel&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;expose&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3306&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;ports&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;3360:3360&amp;quot;&lt;/span&gt;

    &lt;span style=&#34;color: #ae81ff&#34;&gt;redis&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;quay.io/continuouspipe/redis3:stable&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;expose&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;6379&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;ports&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;6379:6379&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here we have three services, &lt;code&gt;web&lt;/code&gt;, &lt;code&gt;database&lt;/code&gt; and &lt;code&gt;redis&lt;/code&gt;. Our &lt;code&gt;web&lt;/code&gt; service is our main service that builds from our Dockerfile previously mentioned. This will link to our &lt;code&gt;database&lt;/code&gt; and &lt;code&gt;redis&lt;/code&gt; services which use &lt;code&gt;quay.io/continuouspipe/mysql5.7:stable&lt;/code&gt; and &lt;code&gt;quay.io/continuouspipe/redis3:stable&lt;/code&gt; respectivly. These are just standard &lt;code&gt;redis:3.0&lt;/code&gt; and &lt;code&gt;mysql:5.7&lt;/code&gt; official images in a simple wrapper that allows a faster patching mechanism.&lt;/p&gt;

&lt;p&gt;We are injecting &lt;code&gt;APP_ENV&lt;/code&gt; into our web container as a build argument. This will allow &lt;code&gt;composer install&lt;/code&gt; to run on &lt;code&gt;docker-compose up&lt;/code&gt;. Essentially, this means a developer can simply clone the project repo and start the Docker container and all the setup is handled for them. No more manual steps should be required.&lt;/p&gt;

&lt;p&gt;Additionally our web container is exposing both port &lt;code&gt;80&lt;/code&gt; and &lt;code&gt;443&lt;/code&gt;, this is because our base &lt;a href=&#34;https://github.com/continuouspipe/dockerfiles/tree/master/php-nginx&#34;&gt;php7-nginx&lt;/a&gt; image is creating a self signed SSL certificate and forcing our app to use &lt;code&gt;https://&lt;/code&gt; as default.&lt;/p&gt;

&lt;p&gt;There is an additional environment variable being set for our &lt;code&gt;web&lt;/code&gt; container, &lt;code&gt;APP_USER_LOCAL&lt;/code&gt;, which is used to fix volume permission issues.&lt;/p&gt;

&lt;div class=&#34;admonition warning&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Warning&lt;/p&gt;
&lt;p&gt;&lt;code&gt;APP_USER_LOCAL&lt;/code&gt; should only be used in development as using this could cause a security risk. Please see &lt;a href=&#34;https://github.com/continuouspipe/dockerfiles/tree/master/ubuntu/16.04#volume-permission-fixes&#34;&gt;Volume Permission Fixes&lt;/a&gt; for more information&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Docker needs to be able to execute the files we have in &lt;code&gt;tools/docker/setup&lt;/code&gt;. Lets make sure that all files have execute permissions -&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ chmod -R +x tools/docker/setup
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can now start our Docker containers -&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ docker-compose up
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If everything has gone to plan, we should now see the famous &amp;ldquo;Laravel&amp;rdquo; splash page at &lt;code&gt;https://localhost&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/docs/docs/images/guides/laravel/laravel-splash.png&#34; alt=&#34;Laravel Splash&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;prepare-to-build-on-continuouspipe&#34;&gt;Prepare to build on ContinuousPipe&lt;/h3&gt;

&lt;p&gt;We configure ContinuousPipe with a &lt;code&gt;continuous-pipe.yml&lt;/code&gt; file in the root of our project. This is the main configuration file that defines each of our tasks to be executed. As this configuration file is YAML, please ensure proper indentation is set, otherwise ContinuousPipe will fail to load the configuration file correctly.&lt;/p&gt;

&lt;p&gt;First thing we define is some environment variables -&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;continuous-pipe.yaml (partial)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;environment_variables&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;APP_ENV&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;production&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;REMOTE_ENV&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;We are simply setting a the &lt;code&gt;APP_ENV&lt;/code&gt; for use within our build and &lt;code&gt;REMOTE_ENV&lt;/code&gt; which can be used to distinguish the difference between a local docker build and a ContinuousPipe build. This can be useful when you need to to pull additional assets from 3rd party services or perhaps build the frontend assets in your deployments. For this tutorial, we are using this to allow us to generate a new &lt;code&gt;APP_KEY&lt;/code&gt; during the deployment stage.&lt;/p&gt;

&lt;p&gt;Next we define our tasks, our first task is building our image -&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;continuous-pipe.yaml (partial)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;images&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;environment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;APP_ENV&lt;/span&gt;
                  &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${APP_ENV}&lt;/span&gt;

            &lt;span style=&#34;color: #ae81ff&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color: #ae81ff&#34;&gt;web&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                    &lt;span style=&#34;color: #ae81ff&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;quay.io/continuouspipe/laravel-demo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here we injecting the &lt;code&gt;APP_ENV&lt;/code&gt; build argument, the same as we did for our &lt;code&gt;docker-compose.yml&lt;/code&gt; file. We also define the registry repository address where we want to push our freshly built images to.&lt;/p&gt;

&lt;p&gt;The next task to run is the &lt;code&gt;infrastructure&lt;/code&gt; task -&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;continuous-pipe.yaml (partial)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;infrastructure&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
   &lt;span style=&#34;color: #ae81ff&#34;&gt;deploy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
       &lt;span style=&#34;color: #ae81ff&#34;&gt;cluster&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${CLUSTER}&lt;/span&gt;
       &lt;span style=&#34;color: #ae81ff&#34;&gt;environment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
           &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;quot;project-key-&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;code_reference.branch&amp;#39;&lt;/span&gt;

       &lt;span style=&#34;color: #ae81ff&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
           &lt;span style=&#34;color: #ae81ff&#34;&gt;database&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
               &lt;span style=&#34;color: #ae81ff&#34;&gt;specification&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                   &lt;span style=&#34;color: #ae81ff&#34;&gt;volumes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                       &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;persistent&lt;/span&gt;
                         &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;database-volume&lt;/span&gt;
                         &lt;span style=&#34;color: #ae81ff&#34;&gt;capacity&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;5Gi&lt;/span&gt;
                         &lt;span style=&#34;color: #ae81ff&#34;&gt;storage_class&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;default&lt;/span&gt;

                   &lt;span style=&#34;color: #ae81ff&#34;&gt;volume_mounts&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                       &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;database-volume&lt;/span&gt;
                         &lt;span style=&#34;color: #ae81ff&#34;&gt;mount_path&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;/var/lib/mysql&lt;/span&gt;

                   &lt;span style=&#34;color: #ae81ff&#34;&gt;command&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                       &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;/usr/local/bin/docker-entrypoint.sh&lt;/span&gt;
                       &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;mysqld&lt;/span&gt;
                       &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;--ignore-db-dir=lost+found&lt;/span&gt;
                       &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;--max_allowed_packet=128M&lt;/span&gt;

                   &lt;span style=&#34;color: #ae81ff&#34;&gt;ports&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                       &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3306&lt;/span&gt;

                   &lt;span style=&#34;color: #ae81ff&#34;&gt;resources&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                       &lt;span style=&#34;color: #ae81ff&#34;&gt;requests&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                           &lt;span style=&#34;color: #ae81ff&#34;&gt;cpu&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;50m&lt;/span&gt;
                           &lt;span style=&#34;color: #ae81ff&#34;&gt;memory&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;250Mi&lt;/span&gt;
                       &lt;span style=&#34;color: #ae81ff&#34;&gt;limits&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                           &lt;span style=&#34;color: #ae81ff&#34;&gt;cpu&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;500m&lt;/span&gt;
                           &lt;span style=&#34;color: #ae81ff&#34;&gt;memory&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;500Mi&lt;/span&gt;

           &lt;span style=&#34;color: #ae81ff&#34;&gt;redis&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
               &lt;span style=&#34;color: #ae81ff&#34;&gt;deployment_strategy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                   &lt;span style=&#34;color: #ae81ff&#34;&gt;readiness_probe&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                       &lt;span style=&#34;color: #ae81ff&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;tcp&lt;/span&gt;
                       &lt;span style=&#34;color: #ae81ff&#34;&gt;port&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;6379&lt;/span&gt;

               &lt;span style=&#34;color: #ae81ff&#34;&gt;specification&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                   &lt;span style=&#34;color: #ae81ff&#34;&gt;ports&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                       &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;6379&lt;/span&gt;

                   &lt;span style=&#34;color: #ae81ff&#34;&gt;resources&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                       &lt;span style=&#34;color: #ae81ff&#34;&gt;requests&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                           &lt;span style=&#34;color: #ae81ff&#34;&gt;cpu&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;50m&lt;/span&gt;
                           &lt;span style=&#34;color: #ae81ff&#34;&gt;memory&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;100Mi&lt;/span&gt;
                       &lt;span style=&#34;color: #ae81ff&#34;&gt;limits&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                           &lt;span style=&#34;color: #ae81ff&#34;&gt;cpu&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;250m&lt;/span&gt;
                           &lt;span style=&#34;color: #ae81ff&#34;&gt;memory&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;250Mi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is where we build our redis and database containers. We define a persistent volume to store our database so we don&amp;rsquo;t need to build again on subsequent deployments. We are also setting the required cluster resources for these containers. Notice we set &lt;code&gt;cluster: ${CLUSTER}&lt;/code&gt;. This is pulling the cluster name we previously set in the ContinuousPipe UI under Clusters.&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;An important change for each of our tasks is to define the project key. Where I have set an environment name as &lt;code&gt;&amp;quot;project-key-&amp;quot; ~ code_reference.branch&lt;/code&gt;, you should replace the &lt;code&gt;project-key&lt;/code&gt; with your project name you defined earlier in the ContinuousPipe setup step.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Our next task in the list is &lt;code&gt;initialization&lt;/code&gt; -&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;continuous-pipe.yaml (partial)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;initialization&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;cluster&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${CLUSTER}&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;environment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;quot;project-key-&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;code_reference.branch&amp;#39;&lt;/span&gt;

        &lt;span style=&#34;color: #ae81ff&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;from_service&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;web&lt;/span&gt;

        &lt;span style=&#34;color: #ae81ff&#34;&gt;commands&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;tools/docker/setup/setup.sh&lt;/span&gt;

        &lt;span style=&#34;color: #ae81ff&#34;&gt;environment_variables&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;amp;WEB_ENV_VARS&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;APP_ENV&lt;/span&gt;
              &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${APP_ENV}&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;REMOTE_ENV&lt;/span&gt;
              &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${REMOTE_ENV}&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;APP_URL&lt;/span&gt;
              &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${APP_URL}&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;APP_USER_LOCAL&lt;/span&gt;
              &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;false&lt;/span&gt;

    &lt;span style=&#34;color: #ae81ff&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;expression&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;tasks.infrastructure.services.database.created&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;The purpose of this task is to allow us to run any database specific tasks for our application. This might be the combination of a &lt;code&gt;php artisan migrate&lt;/code&gt; and &lt;code&gt;php artisan db:seed&lt;/code&gt;. Notice we are using the &lt;code&gt;filter&lt;/code&gt; &lt;code&gt;expression: &#39;tasks.infrastructure.services.database.created&#39;&lt;/code&gt;, this ensures we only run this when we know the database is finished building. We run these commands by executing a script &lt;code&gt;tools/docker/setup/setup.sh&lt;/code&gt; inside the container that has had some specific environment variables set.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: We have explicitly set &lt;code&gt;APP_USER_LOCAL&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; to elevate any security concerns previously mentioned with this setting&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The last task in this configuration is &lt;code&gt;application&lt;/code&gt; -&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;continuous-pipe.yaml (partial)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;application&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
   &lt;span style=&#34;color: #ae81ff&#34;&gt;deploy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
       &lt;span style=&#34;color: #ae81ff&#34;&gt;cluster&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${CLUSTER}&lt;/span&gt;
       &lt;span style=&#34;color: #ae81ff&#34;&gt;environment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
           &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;quot;project-key-&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;code_reference.branch&amp;#39;&lt;/span&gt;

       &lt;span style=&#34;color: #ae81ff&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
           &lt;span style=&#34;color: #ae81ff&#34;&gt;web&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
               &lt;span style=&#34;color: #ae81ff&#34;&gt;specification&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                   &lt;span style=&#34;color: #ae81ff&#34;&gt;accessibility&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                       &lt;span style=&#34;color: #ae81ff&#34;&gt;from_external&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;true&lt;/span&gt;

                   &lt;span style=&#34;color: #ae81ff&#34;&gt;environment_variables&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                       &lt;span style=&#34;color: #ae81ff&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;*WEB_ENV_VARS&lt;/span&gt;

                   &lt;span style=&#34;color: #ae81ff&#34;&gt;resources&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                       &lt;span style=&#34;color: #ae81ff&#34;&gt;requests&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                           &lt;span style=&#34;color: #ae81ff&#34;&gt;cpu&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;50m&lt;/span&gt;
                           &lt;span style=&#34;color: #ae81ff&#34;&gt;memory&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;500Mi&lt;/span&gt;

                       &lt;span style=&#34;color: #ae81ff&#34;&gt;limits&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                           &lt;span style=&#34;color: #ae81ff&#34;&gt;cpu&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;
                           &lt;span style=&#34;color: #ae81ff&#34;&gt;memory&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2G&lt;/span&gt;

                   &lt;span style=&#34;color: #ae81ff&#34;&gt;ports&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                       &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;80&lt;/span&gt;
                       &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;443&lt;/span&gt;

               &lt;span style=&#34;color: #ae81ff&#34;&gt;deployment_strategy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                   &lt;span style=&#34;color: #ae81ff&#34;&gt;readiness_probe&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                       &lt;span style=&#34;color: #ae81ff&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;tcp&lt;/span&gt;
                       &lt;span style=&#34;color: #ae81ff&#34;&gt;port&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;80&lt;/span&gt;
                       &lt;span style=&#34;color: #ae81ff&#34;&gt;initial_delay_seconds&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;30&lt;/span&gt;
                       &lt;span style=&#34;color: #ae81ff&#34;&gt;period_seconds&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;30&lt;/span&gt;
                       &lt;span style=&#34;color: #ae81ff&#34;&gt;failure_threshold&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;120&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here we are creating a new web container, making it accessible to the public which instructs ContinuousPipe to get an IP address from the load balancer. We inject the environment variables previously defined in the &lt;code&gt;initalization&lt;/code&gt; task, and finally we configure the resources required from the cluster and open up the required ports, &lt;code&gt;80&lt;/code&gt; and &lt;code&gt;443&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The last section of this task is the &lt;code&gt;deployment_strategy&lt;/code&gt; which configures how ContinuousPipe will determine when the container is finished building and if it was successful or not. For more information on health checks please refer to &lt;a href=&#34;http://continuouspipe.github.io/docs/configuration/deployments/#health-checks&#34;&gt;http://continuouspipe.github.io/docs/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we have defined our &lt;code&gt;continuous-pipe.yml&lt;/code&gt; file lets configure that one last script we set to use in the &lt;code&gt;initialization&lt;/code&gt; task. Create a new file &lt;code&gt;tools/docker/setup/setup.sh&lt;/code&gt; with the following -&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;tools/docker/setup/setup.sh&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#!/bin/bash&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;set&lt;/span&gt; -xe

&lt;span style=&#34;color: #75715e&#34;&gt;# Bring in the as_code_owner function, to run commands as the user who owns the code.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# Usually the &amp;quot;build&amp;quot; user.&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;source&lt;/span&gt; /usr/local/share/bootstrap/setup.sh
&lt;span style=&#34;color: #f8f8f2&#34;&gt;source&lt;/span&gt; /usr/local/share/bootstrap/common_functions.sh

&lt;span style=&#34;color: #f8f8f2&#34;&gt;WORK_DIRECTORY&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/app&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_CONNECTION&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_CONNECTION&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;mysql&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_HOST&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_HOST&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;database&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_PORT&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_PORT&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;3306&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_DATABASE&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_DATABASE&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;laravel&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_USERNAME&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_USERNAME&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;laravel&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_PASSWORD&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_PASSWORD&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;laravel&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_ROOT_PASSWORD&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DB_PASSWORD&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;laravel&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;WORK_DIRECTORY&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
as_code_owner &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;php artisan migrate&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;We are simply running a &lt;code&gt;php artisan migrate&lt;/code&gt; here to setup all our defined database tables.&lt;/p&gt;

&lt;p&gt;OK, we are finally ready to push all our code to GitHub and utilise ContinuousPipe to build and deploy our application on the cluster.&lt;/p&gt;

&lt;p&gt;Lets now push our code to GitHub to trigger ContinuousPipe -&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git init
$ git add -A
$ git commit -m &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Initial Commit&amp;quot;&lt;/span&gt;
$ git remote add origin https://github.com:continuouspipe/demo-laravel.git
$ git push -u origin master
Counting objects: &lt;span style=&#34;color: #ae81ff&#34;&gt;128&lt;/span&gt;, &lt;span style=&#34;color: #66d9ef&#34;&gt;done&lt;/span&gt;.
Delta compression using up to &lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt; threads.
Compressing objects: &lt;span style=&#34;color: #ae81ff&#34;&gt;100&lt;/span&gt;% &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;107&lt;/span&gt;/107&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color: #66d9ef&#34;&gt;done&lt;/span&gt;.
Writing objects: &lt;span style=&#34;color: #ae81ff&#34;&gt;100&lt;/span&gt;% &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;128&lt;/span&gt;/128&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color: #ae81ff&#34;&gt;206&lt;/span&gt;.86 KiB &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt; bytes/s, &lt;span style=&#34;color: #66d9ef&#34;&gt;done&lt;/span&gt;.
Total &lt;span style=&#34;color: #ae81ff&#34;&gt;128&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;delta &lt;span style=&#34;color: #ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;, reused &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;delta &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
remote: Resolving deltas: &lt;span style=&#34;color: #ae81ff&#34;&gt;100&lt;/span&gt;% &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;8&lt;/span&gt;/8&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color: #66d9ef&#34;&gt;done&lt;/span&gt;.
To github.com:continuouspipe/demo-laravel.git
 * &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;new branch&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;      master -&amp;gt; master
Branch master &lt;span style=&#34;color: #f8f8f2&#34;&gt;set&lt;/span&gt; up to track remote branch master from origin.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Thats it, we should now see ContinuousPipe working through our defined tasks -&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/docs/docs/images/guides/laravel/flow-overview.png&#34; alt=&#34;Dashboard&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once all our tasks have finished we should see a success status, everything green and a public endpoint for the web service.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/docs/docs/images/guides/laravel/tide-complete-tasks.png&#34; alt=&#34;Complete Tasks&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If we now visit this endpoint in the browser e.g. &lt;code&gt;https://104.199.75.150/&lt;/code&gt; we should now see that Laravel splash page we previously seen when running in our local Docker build -&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/docs/docs/images/guides/laravel/laravel-splash.png&#34; alt=&#34;Laravel Splash&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;remote-development-environment&#34;&gt;Remote development environment&lt;/h2&gt;

&lt;p&gt;Since our project is essentially just running in docker and it now works on both local Docker and ContinuousPipe we can effectively turn our cluster performance into a really fast development environment.&lt;/p&gt;

&lt;p&gt;We are going to instruct ContinuousPipe to build us a new environment by creating our own &amp;ldquo;dev&amp;rdquo; branch in our GitHub repository. When complete, we will watch our local file system for any changes to our codebase and synchronise these changes into our running &lt;code&gt;web&lt;/code&gt; container. It&amp;rsquo;s really that simple.&lt;/p&gt;

&lt;h3 id=&#34;install-cp-remote&#34;&gt;Install &lt;code&gt;cp-remote&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;cp-remote&lt;/code&gt; is available on OSX, Linux and Windows. Please refer to the &lt;a href=&#34;/docs/docs/remote-development/getting-started/#installation&#34;&gt;remote development installation instructions&lt;/a&gt; for each of the platforms.&lt;/p&gt;

&lt;p&gt;For simplicity, here is the OSX installation instructions&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;sudo curl https://raw.githubusercontent.com/continuouspipe/remote-environment-client/gh-pages/0.0.1/darwin-amd64.gz &amp;gt; cp-remote.gz
gzip -d cp-remote.gz&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
mv cp-remote /usr/local/bin/cp-remote
chmod +x /usr/local/bin/cp-remote
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rsync&lt;/code&gt; &amp;amp; &lt;code&gt;git&lt;/code&gt; are required for &lt;code&gt;cp-remote&lt;/code&gt; to work&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&#34;setup&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;Now that we have &lt;code&gt;cp-remote&lt;/code&gt; installed, we are ready to setup our remote environment. From the root of your project run the following -&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ cp-remote setup
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will now be asked a series of questions that relate to how you have configured ContinuousPipe and your cluster details. Please refer to the &lt;a href=&#34;/docs/docs/remote-development/command-setup/&#34;&gt;remote development setup instructions&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h3 id=&#34;build-the-environment&#34;&gt;Build the environment&lt;/h3&gt;

&lt;p&gt;Run the following -&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ cp-remote build
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is now going to create a new git branch from the current branch with the name you defined in the setup. Its going to push this branch to GitHub which will then trigger ContinuousPipe to create you a new developer environment. You should now see the something like -&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;Pushing to remote
Total &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;delta &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;, reused &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;delta &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
To github.com:continuouspipe/demo-laravel.git
 * &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;new branch&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;      master -&amp;gt; dev-richdynamix
Continuous Pipe will now build your developer environment
You can see when it is &lt;span style=&#34;color: #f8f8f2&#34;&gt;complete&lt;/span&gt; and find its IP address at https://your-ui.example.com/
Please &lt;span style=&#34;color: #f8f8f2&#34;&gt;wait&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;until&lt;/span&gt; the build is &lt;span style=&#34;color: #f8f8f2&#34;&gt;complete&lt;/span&gt; to use any of this tool&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;&amp;#39;&lt;/span&gt;s other commands.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;/docs/docs/images/guides/laravel/dashboard-with-dev.png&#34; alt=&#34;Dashboard with dev environment&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can check that the environment is ready either from the ContinuousPipe UI or by running the following -&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ cp-remote ck
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which should display something like this  -&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;checking connection &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; environment laravel-demo-dev-richdynamix
Connected successfully and found &lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt; pods &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; the environment
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now that we know all three containers (pods) have been setup we need to obtain the IP address from the ContinuousPipe UI for that tide. Lets visit the IP address in our browser and once again, we will see the Laravel splash page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/docs/docs/images/guides/laravel/laravel-splash.png&#34; alt=&#34;Laravel Splash&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;watching-for-changes&#34;&gt;Watching for changes&lt;/h3&gt;

&lt;p&gt;From within your project root, lets start watching for file changes -&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ cp-remote watch
Watching &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; changes. Quit anytime with Ctrl-C.

.cp-remote-ignore was missing or empty and has been created with the default ignore settings.

Destination Pod: web-3232721034-k6g9t
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we run the &lt;code&gt;cp-remote watch&lt;/code&gt; command which will use our default &lt;code&gt;web&lt;/code&gt; container as the destination pod.&lt;/p&gt;

&lt;p&gt;Lets edit some code and see our changes reflected in the browser. Open &lt;code&gt;resources/views/welcome.blade.php&lt;/code&gt; and change the title on &lt;code&gt;Line 82&lt;/code&gt;. I will change it to &amp;ldquo;Awesome Laravel&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/docs/docs/images/guides/laravel/sublime.png&#34; alt=&#34;Sublime&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When you save this file from within your editor, the &lt;code&gt;cp-remote watch&lt;/code&gt; command will pick up these changes and &lt;code&gt;RSYNC&lt;/code&gt; them to the web container. Your terminal should look something like the following -&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ cp-remote watch
Watching &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; changes. Quit anytime with Ctrl-C.

.cp-remote-ignore was missing or empty and has been created with the default ignore settings.

Destination Pod: web-3232721034-k6g9t
Synchronizing filesystem changes...
resources/views/welcome.blade.php
Done.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now when you check the site in the browser you should see the following -&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/docs/docs/images/guides/laravel/awesome-laravel.png&#34; alt=&#34;Awesome Laravel&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here is a quick screencast of that syncing in action -&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/docs/docs/images/guides/laravel/awesome-laravel-screencast.gif&#34;&gt;&lt;img src=&#34;/docs/docs/images/guides/laravel/awesome-laravel-screencast.gif&#34; alt=&#34;Laravel Screencast&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The syncing speeds are pretty fast, so fast in fact, I can run this from a train wifi while retaining the performance of the cloud hosting.&lt;/p&gt;

&lt;p&gt;For full instructions on other commands in the &lt;code&gt;cp-remote&lt;/code&gt; CLI tool, such as port forwarding, connecting to the web container via BASH or even destroying the environment visit the &lt;a href=&#34;https://github.com/continuouspipe/remote-environment-client&#34;&gt;README&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;ContinuousPipe is a fantastic tool for simplifying container orchestration and deployment. Its makes the CI/CD workflow much more productive than similar tools available. One of the best and unique features of ContinuousPipe is the remote developer environments. This not only reduces the resource requirements of the developer&amp;rsquo;s laptop, but it also ensures compatibility across platforms.&lt;/p&gt;

&lt;p&gt;There is far more we can do with ContinuousPipe to increase productivity, for example, we can use filters to determine when tasks are run. Perhaps we only want certain branches to build environments, or a certain GitHub label on a Pull-Request to trigger the build. We can also go one step further and separate our builds into pipelines. Perhaps we want to have a separate pipeline for production compared to development or testing. This is useful if there are certain environment variables and tasks that should only be used in development but not production.&lt;/p&gt;

&lt;p&gt;This getting started guide should be treated as a first step, please refer to the &lt;a href=&#34;http://continuouspipe.github.io/docs&#34;&gt;http://continuouspipe.github.io/docs&lt;/a&gt; for more advanced tutorials.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with Symfony</title>
      <link>/docs/guides/symfony/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/guides/symfony/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This is a guide to getting a Symfony application running on ContinuousPipe with a remote development environment. The code samples used in the guide can be seen at &lt;a href=&#34;https://github.com/continuouspipe/demo-symfony&#34;&gt;https://github.com/continuouspipe/demo-symfony&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Recorded video&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve recorded a &lt;a href=&#34;https://www.youtube.com/watch?v=d45YNe7umWI&#34;&gt;getting started with ContinuousPipe&lt;/a&gt; video that uses a Symfony application as a demonstration, you may also want to have a look.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;Before getting started you will need the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; or &lt;a href=&#34;https://bitbucket.org/&#34;&gt;Bitbucket&lt;/a&gt; account to host your Symfony project&lt;/li&gt;
&lt;li&gt;A &lt;a href=&#34;https://continuouspipe.github.io/&#34;&gt;ContinuousPipe&lt;/a&gt; account&lt;/li&gt;
&lt;li&gt;A Kubernetes cluster e.g. &lt;a href=&#34;https://aws.amazon.com/&#34;&gt;AWS&lt;/a&gt;, &lt;a href=&#34;https://cloud.google.com/container-engine/&#34;&gt;GCE&lt;/a&gt; or &lt;a href=&#34;https://azure.microsoft.com/en-au/&#34;&gt;Azure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A Docker Registry account e.g. &lt;a href=&#34;https://docker.io&#34;&gt;docker.io&lt;/a&gt; or &lt;a href=&#34;https://quay.io&#34;&gt;quay.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;setting-up-symfony&#34;&gt;Setting Up Symfony&lt;/h2&gt;

&lt;h3 id=&#34;installing-symfony&#34;&gt;Installing Symfony&lt;/h3&gt;

&lt;p&gt;Use the &lt;a href=&#34;http://symfony.com/download&#34;&gt;Symfony installer tool&lt;/a&gt; to create a new Symfony application locally:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;symfony new demo-symfony &lt;span style=&#34;color: #75715e&#34;&gt;#replace demo-symfony with your project name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check everything is working so far using the local webserver:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; demo-symfony
bin/console server:run
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;connecting-to-the-github-repository&#34;&gt;Connecting to the GitHub Repository&lt;/h3&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;This series of steps are needed because the Symfony installer will not install Symfony into an existing directory, so cloning the repository first does not work.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Create a local git repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;git init
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Commit the initial installation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;git add . &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Initial installation of Symfony&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Add a GitHub repository as a remote:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;git remote add origin git@github.com:continuouspipe/demo-symfony.git
&lt;span style=&#34;color: #75715e&#34;&gt;#replacing the organisation and repository with your repository&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;integrating-symfony-with-continuouspipe&#34;&gt;Integrating Symfony with ContinuousPipe&lt;/h2&gt;

&lt;h3 id=&#34;adding-docker-configuration-files&#34;&gt;Adding Docker Configuration Files&lt;/h3&gt;

&lt;p&gt;Add a &lt;code&gt;Dockerfile&lt;/code&gt; to the project root with the following content:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM quay.io/continuouspipe/symfony-php7.1-nginx:v1.0
ARG GITHUB_TOKEN=
ARG SYMFONY_ENV=prod
ENV SYMFONY_ENV $SYMFONY_ENV
COPY . /app
RUN container build
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Dockerfile is used to specify how the Docker image is built. It is based on a prebuilt image created specifically for Symfony running on nginx. This is one of several &lt;a href=&#34;/docs/docs/faq/what-are-the-continuous-pipe-images/&#34;&gt;ContinuousPipe images&lt;/a&gt; that can be found at &lt;a href=&#34;https://github.com/continuouspipe/dockerfiles&#34;&gt;https://github.com/continuouspipe/dockerfiles&lt;/a&gt;. The &lt;a href=&#34;https://github.com/continuouspipe/dockerfiles/tree/master/symfony#environment-variables&#34;&gt;README&lt;/a&gt; for the prebuilt image lists the arguments that can be passed when it is initialised, including the &lt;code&gt;SYMFONY_ENV&lt;/code&gt; environment variable. The repository project code is copied onto the image and a script is run which will do things like install the vendors with composer. Read more about &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/&#34;&gt;Dockerfiles&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Add the following docker compose configuration in a &lt;code&gt;docker-compose.yml&lt;/code&gt; file in the project root.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;docker-compose.yml&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;version&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #ae81ff&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color: #ae81ff&#34;&gt;web&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;.&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;expose&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;80&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;443&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;ports&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;8080:80&amp;quot;&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;443:443&amp;quot;&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;volumes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;.:/app&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;ContinuousPipe uses the &lt;code&gt;docker-compose.yml&lt;/code&gt; configuration to know how to build and configure the services that it deploys. Here only a single web service is used as adding other services such as a database is left out at this stage. The configuration for the web service specifies the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;That the service is created from an image built from a Dockerfile in the same directory (build: .)&lt;/li&gt;
&lt;li&gt;Which ports to expose&lt;/li&gt;
&lt;li&gt;What the project directory is mounted as a volume at /app&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;Mounting the volume is not needed for ContinuousPipe but does allow us to run the service locally using &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;docker-compose&lt;/a&gt; and be able to make change to the project source code and see the changes.&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&#34;adding-continuouspipe-configuration-file&#34;&gt;Adding ContinuousPipe Configuration File&lt;/h3&gt;

&lt;p&gt;Add a &lt;code&gt;continuous-pipe.yml&lt;/code&gt; file to the project root with a basic configuration of:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;continuous-pipe.yml&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color: #ae81ff&#34;&gt;images&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
          &lt;span style=&#34;color: #ae81ff&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
              &lt;span style=&#34;color: #ae81ff&#34;&gt;web&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                  &lt;span style=&#34;color: #ae81ff&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${IMAGE_NAME}&lt;/span&gt;
                  &lt;span style=&#34;color: #ae81ff&#34;&gt;naming_strategy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;sha1&lt;/span&gt;
  &lt;span style=&#34;color: #ae81ff&#34;&gt;deployment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;deploy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
          &lt;span style=&#34;color: #ae81ff&#34;&gt;cluster&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${CLUSTER}&lt;/span&gt;
          &lt;span style=&#34;color: #ae81ff&#34;&gt;environment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
              &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;quot;sfdemo-&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;code_reference.branch&amp;#39;&lt;/span&gt;
          &lt;span style=&#34;color: #ae81ff&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
              &lt;span style=&#34;color: #ae81ff&#34;&gt;web&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                  &lt;span style=&#34;color: #ae81ff&#34;&gt;specification&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                      &lt;span style=&#34;color: #ae81ff&#34;&gt;accessibility&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                          &lt;span style=&#34;color: #ae81ff&#34;&gt;from_external&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;This configures two tasks for ContinuousPipe to run when a tide is triggered by code being pushed to the GitHub repository.&lt;/p&gt;

&lt;p&gt;The first task, called &lt;code&gt;images&lt;/code&gt;, builds a Docker image for the web service based on the matching configuration for the web service in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file. The built image will include the repository contents in the commit that triggered the build (because of the instructions in the Dockerfile in the previous step). Once the image is built ContinuousPipe will push it to an image registry configured using the &lt;code&gt;IMAGE_NAME&lt;/code&gt; variable (setting this variable is explained later).&lt;/p&gt;

&lt;p&gt;The second task, called &lt;code&gt;deployment&lt;/code&gt;, deploys the service to a cluster set with the &lt;code&gt;CLUSTER&lt;/code&gt; variable (setting this variable is explained later). The environment name used to refer to the deployment is made consistent by combining &amp;ldquo;sfdemo-&amp;rdquo; with the name of the branch that triggered the process. Then the web service is deployed - it needs to be accessible directly from a browser so &lt;code&gt;from_external&lt;/code&gt; has been set to &amp;ldquo;true&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The ContinousPipe documentation has more information about &lt;a href=&#34;/docs/docs/configuration/tasks/&#34;&gt;tasks&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;configuring-the-continuouspipe-console&#34;&gt;Configuring the ContinuousPipe Console&lt;/h3&gt;

&lt;p&gt;Before we can push any code to our repository, we need to ensure that the ContinuousPipe console is properly configured. Please refer to the ContinuousPipe Quick Start guide to setup your &lt;a href=&#34;/docs/docs/quick-start/creating-a-project/&#34;&gt;project&lt;/a&gt;, &lt;a href=&#34;/docs/docs/quick-start/configuring-a-cluster/&#34;&gt;cluster&lt;/a&gt;, &lt;a href=&#34;/docs/docs/quick-start/configuring-a-registry/&#34;&gt;registry&lt;/a&gt; and create your first &lt;a href=&#34;/docs/docs/quick-start/creating-a-flow/&#34;&gt;flow&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;adding-variables-to-the-continuouspipe-console&#34;&gt;Adding Variables to the ContinuousPipe Console&lt;/h3&gt;

&lt;p&gt;When creating the &lt;code&gt;continuous-pipe.yml&lt;/code&gt; above an &lt;code&gt;IMAGE_NAME&lt;/code&gt; and &lt;code&gt;CLUSTER&lt;/code&gt; variable were used. These can now be added in the configuration section of the new flow within the ContinuousPipe console. This is explained in &lt;a href=&#34;/docs/docs/quick-start/configuring-a-flow/&#34;&gt;configuring a flow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;CLUSTER&lt;/code&gt; value you need can be found in the &amp;ldquo;Clusters&amp;rdquo; tab of the project. If you manually entered the Kubernetes cluster details you will have set the value yourself. If you used a Google linked account the value will have been set when setting up the Google Container Engine.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;IMAGE_NAME&lt;/code&gt; value is the path where the Docker image should be pushed to. This needs to be the full name, including the Docker repo and account e.g. &lt;code&gt;docker.io/continuouspipe/demo-symfony&lt;/code&gt;. If you don&amp;rsquo;t yet have a Docker repo nor do you know how to create one, please refer to the &lt;a href=&#34;https://docs.docker.com/docker-hub/repos/&#34;&gt;Docker Hub repositories documentation&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;The variables can also have their values provided in the &lt;code&gt;continuous-pipe.yml&lt;/code&gt; file as is done below for the symfony environment. Keeping them out of the file and in the ContinuousPipe console allows you to keep them out of your code repository.&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&#34;initiating-a-tide&#34;&gt;Initiating a Tide&lt;/h3&gt;

&lt;p&gt;Commit any changes if not already done and push them to your code repository. You should be able to see that a tide was triggered on the overview or tides pages for the flow on &lt;a href=&#34;https://your-ui.example.com&#34;&gt;https://your-ui.example.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/docs/docs/images/guides/symfony/cp-tide-running.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Clicking on the status will show more details of the build progressing. Some steps, particularly building the image and pushing it to the registry, may take a while to complete. Once it has completed running successfully you can view the environment and from there open the web service and see the running application:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/docs/docs/images/guides/symfony/cp-tide-environment.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The default Symfony installation page should be served up (you may need to accept using the self-signed SSL cert):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/docs/docs/images/guides/symfony/endpoint-view.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;remote-development-with-continuouspipe&#34;&gt;Remote Development with ContinuousPipe&lt;/h2&gt;

&lt;h3 id=&#34;install-the-client&#34;&gt;Install the Client&lt;/h3&gt;

&lt;p&gt;To use ContinuousPipe as a remote development environment you will need the &lt;code&gt;cp-remote&lt;/code&gt; client, which is available on OSX, Linux and Windows. Please refer to the &lt;a href=&#34;/docs/docs/remote-development/getting-started/#installation&#34;&gt;remote development installation instructions&lt;/a&gt; for each of the platforms.&lt;/p&gt;

&lt;h3 id=&#34;run-setup&#34;&gt;Run Setup&lt;/h3&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt; cp-remote setup
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will now be asked a series of questions that relate to how you have configured ContinuousPipe and your cluster details. Please refer to the &lt;a href=&#34;/docs/docs/remote-development/command-setup/&#34;&gt;remote development setup instructions&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h3 id=&#34;build-the-remote-environment&#34;&gt;Build the Remote Environment&lt;/h3&gt;

&lt;p&gt;To create the remote development environment run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;cp-remote build
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will force push the current commit you have checked out as the remote environment branch. So assuming you are still on the master branch and at the commit that successfully created an environment, this will be used to create your initial remote environment. You can rerun the &lt;code&gt;cp-remote build&lt;/code&gt; command to rebuild the remote environment with whatever you have checked out at that point as needed. However, you should not need to do this frequently if you use &lt;code&gt;cp-remote watch&lt;/code&gt; to sync changes to your remote environment as you make them (explained below).&lt;/p&gt;

&lt;h3 id=&#34;symfony-modes&#34;&gt;Symfony Modes&lt;/h3&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;ContinuousPipe environments are different from &lt;a href=&#34;https://symfony.com/doc/current/configuration/environments.html&#34;&gt;Symfony environments&lt;/a&gt;. The former refers to a  ContinuousPipe deployment target associated with a cluster and a branch, whereas the latter refer to a Symfony application state. To avoid confusion Symfony &amp;ldquo;environments&amp;rdquo; are referred to here as &amp;ldquo;modes&amp;rdquo;.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Currently, the application is using the Symfony production mode, which is not suitable for development purposes. To enable Symfony development mode for the ContinuousPipe remote environment you can use ContinuousPipe pipelines. Edit the &lt;code&gt;continuous-pipe.yml&lt;/code&gt; file to be as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;continuous-pipe.yml&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;variables&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;SYMFONY_ENV&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;prod&lt;/span&gt;
 
&lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;images&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color: #ae81ff&#34;&gt;web&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                    &lt;span style=&#34;color: #ae81ff&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${IMAGE_NAME}&lt;/span&gt;
                    &lt;span style=&#34;color: #ae81ff&#34;&gt;naming_strategy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;sha1&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;deployment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;deploy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;cluster&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${CLUSTER}&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;environment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;quot;sfdemo-&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;code_reference.branch&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color: #ae81ff&#34;&gt;web&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                    &lt;span style=&#34;color: #ae81ff&#34;&gt;specification&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                        &lt;span style=&#34;color: #ae81ff&#34;&gt;accessibility&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                            &lt;span style=&#34;color: #ae81ff&#34;&gt;from_external&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;true&lt;/span&gt;
                        &lt;span style=&#34;color: #ae81ff&#34;&gt;environment_variables&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;SYMFONY_ENV&lt;/span&gt;
                              &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${SYMFONY_ENV}&lt;/span&gt;

&lt;span style=&#34;color: #ae81ff&#34;&gt;pipelines&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;Production&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;condition&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;code_reference.branch&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;[&amp;quot;master&amp;quot;]&amp;#39;&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;images,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;deployment&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;Remote&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;condition&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;code_reference.branch&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;matches&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/^cpdev/&amp;quot;&amp;#39;&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;images,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;deployment&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;variables&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;SYMFONY_ENV&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;dev&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;This adds two different pipelines which use conditions to determine which pipeline is used. In this case it checks if the branch starts with &amp;ldquo;cpdev&amp;rdquo; - if it does then the Remote pipeline is used. If the branch is &amp;ldquo;master&amp;rdquo; then the Production pipeline is used. If the branch does not match either of those conditions, the tide will fail. You could use this to run different tasks but here the same tasks are run but variables have different values set.&lt;/p&gt;

&lt;p&gt;The YAML variable being used is named &lt;code&gt;SYMFONY_ENV&lt;/code&gt; which is declared and initialised to &amp;ldquo;prod&amp;rdquo; at the top of the file. It stays as &amp;ldquo;prod&amp;rdquo; for the Production pipeline but is set to &amp;ldquo;dev&amp;rdquo; for remote environments.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;SYMFONY_ENV&lt;/code&gt; YAML variable only has scope in ContinuousPipe whilst running the tasks - it is actually the &lt;code&gt;environment_variables&lt;/code&gt; section for the service that is used to set &lt;code&gt;SYMFONY_ENV&lt;/code&gt; as an environment variable on the service.&lt;/p&gt;

&lt;h3 id=&#34;front-controller-changes&#34;&gt;Front Controller Changes&lt;/h3&gt;

&lt;p&gt;Symfony uses the &lt;code&gt;SYMFONY_ENV&lt;/code&gt; environment variable to set the environment when running console commands but does not use it in the front controller, so you will need to make some changes to that file.&lt;/p&gt;

&lt;p&gt;Edit the &lt;code&gt;web/app.php&lt;/code&gt; file in the repository to be as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;web/app.php&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;php&lt;/span&gt;
 
&lt;span style=&#34;color: #66d9ef&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Symfony\Component\HttpFoundation\Request&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Symfony\Component\Debug\Debug&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
 
&lt;span style=&#34;color: #f8f8f2&#34;&gt;$environment&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getenv(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;SYMFONY_ENV&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;($environment&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;$environment&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;prod&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
 
&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(($useDebugging&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getenv(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;SYMFONY_DEBUG&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$useDebugging&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;$useDebugging&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$environment&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;dev&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
 
&lt;span style=&#34;color: #e6db74&#34;&gt;/** @var \Composer\Autoload\ClassLoader $loader */&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;$loader&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;__DIR__&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/../app/autoload.php&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
 
&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$useDebugging)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;include_once&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;__DIR__&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/../var/bootstrap.php.cache&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
 
&lt;span style=&#34;color: #66d9ef&#34;&gt;require_once&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;__DIR__&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/../app/AppKernel.php&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
 
&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;($useDebugging)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;Debug&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;enable&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
 
&lt;span style=&#34;color: #f8f8f2&#34;&gt;$kernel&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;AppKernel&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;($environment,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$useDebugging);&lt;/span&gt;
 
&lt;span style=&#34;color: #75715e&#34;&gt;// we don&amp;#39;t want to use the classes cache if we are in a debug session&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$useDebugging)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;$kernel&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;loadClassCache&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
 
 
&lt;span style=&#34;color: #75715e&#34;&gt;// When using the HttpCache, you need to call the method in your front controller instead of relying on the configuration parameter&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;//Request::enableHttpMethodParameterOverride();&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;$request&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Request&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;createFromGlobals&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;$response&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$kernel&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;handle&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;($request);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;$response&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;send&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;$kernel&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;terminate&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;($request,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$response);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;These changes will mean that the &lt;code&gt;SYMFONY_ENV&lt;/code&gt; environment variable will be used to decide which Symfony application mode is used. You can also use a &lt;code&gt;SYMFONY_DEBUG&lt;/code&gt; environment variable to turn debug more on and off, if not set then it will be on for development mode and off for production mode.&lt;/p&gt;

&lt;h3 id=&#34;rebuild-the-remote-environment&#34;&gt;Rebuild the Remote Environment&lt;/h3&gt;

&lt;p&gt;To rebuild the remote environment with these changes, commit them to master and run &lt;code&gt;cp-remote build&lt;/code&gt; - this will establish the Production pipeline. You can now switch to a branch prefixed with &amp;ldquo;cpdev&amp;rdquo; and run &lt;code&gt;cp-remote build&lt;/code&gt; again to establish the Remote pipeline. You will then see the two new pipelines on the overview page in the ContinuousPipe console.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/docs/docs/images/guides/symfony/cp-pipelines.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you now load the Remote pipeline endpoint in the browser you should see the Symfony toolbar at the bottom of the page indicating that it is in development mode.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/docs/docs/images/guides/symfony/endpoint-view-toolbar.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;start-development&#34;&gt;Start Development&lt;/h3&gt;

&lt;p&gt;To start development run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;cp-remote watch
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can now make changes and they will be synced to the remote environment where you should be able to see the result.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with Drupal</title>
      <link>/docs/guides/drupal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/guides/drupal/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This is a guide to getting Drupal 8 running on ContinuousPipe with a remote development environment. The code samples used in the guide can be seen at &lt;a href=&#34;https://github.com/continuouspipe/demo-drupal8&#34;&gt;https://github.com/continuouspipe/demo-drupal8&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;Before getting started you will need the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; or &lt;a href=&#34;https://bitbucket.org/&#34;&gt;Bitbucket&lt;/a&gt; account to host your Drupal project&lt;/li&gt;
&lt;li&gt;A &lt;a href=&#34;https://continuouspipe.github.io/&#34;&gt;ContinuousPipe&lt;/a&gt; account&lt;/li&gt;
&lt;li&gt;A Kubernetes cluster e.g. &lt;a href=&#34;https://aws.amazon.com/&#34;&gt;AWS&lt;/a&gt;, &lt;a href=&#34;https://cloud.google.com/container-engine/&#34;&gt;GCE&lt;/a&gt; or &lt;a href=&#34;https://azure.microsoft.com/en-au/&#34;&gt;Azure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A Docker Registry account e.g. &lt;a href=&#34;https://docker.io&#34;&gt;docker.io&lt;/a&gt; or &lt;a href=&#34;https://quay.io&#34;&gt;quay.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will also need Git and Composer installed on your local machine to follow these instructions.&lt;/p&gt;

&lt;h2 id=&#34;setting-up-drupal-8&#34;&gt;Setting Up Drupal 8&lt;/h2&gt;

&lt;h3 id=&#34;creating-a-skeleton-drupal-8-project&#34;&gt;Creating a Skeleton Drupal 8 Project&lt;/h3&gt;

&lt;p&gt;Whilst you can start from scratch and add the necessary configuration later, the quickest way to get started is to download the example project from GitHub and use this as the basis for your project. Download the following repository and unzip:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;https://github.com/continuouspipe/demo-drupal8/archive/master.zip
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;connecting-to-the-github-repository&#34;&gt;Connecting to the GitHub Repository&lt;/h3&gt;

&lt;p&gt;Move to the downloaded project directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; demo-drupal8
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create a local git repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;git init
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Commit the initial installation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;git add . &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Initial installation of Drupal 8&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Add a GitHub repository as a remote:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;git remote add origin git@github.com:continuouspipe/demo-drupal8.git
&lt;span style=&#34;color: #75715e&#34;&gt;#replacing the organisation and repository with your repository&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;integrating-drupal-with-continuouspipe&#34;&gt;Integrating Drupal with ContinuousPipe&lt;/h2&gt;

&lt;h3 id=&#34;adding-docker-configuration-files&#34;&gt;Adding Docker Configuration Files&lt;/h3&gt;

&lt;p&gt;The example project has a &lt;code&gt;Dockerfile&lt;/code&gt; included in the project root with the following content:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM quay.io/continuouspipe/drupal8-apache-php7:stable

# Add the application
COPY . /app
WORKDIR /app

COPY ./tools/docker/usr/ /usr

ARG GITHUB_TOKEN=
ARG CODE_OWNER=build
ARG CODE_GROUP=build
ARG APP_USER=www-data
ARG APP_GROUP=www-data

RUN container build

&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Dockerfile is used to specify how the Docker image is built. It is based on a prebuilt image created specifically for Drupal 8 running on Apache. This is one of several &lt;a href=&#34;/docs/docs/faq/what-are-the-continuous-pipe-images/&#34;&gt;ContinuousPipe images&lt;/a&gt; that can be found at &lt;a href=&#34;https://github.com/continuouspipe/dockerfiles&#34;&gt;https://github.com/continuouspipe/dockerfiles&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/continuouspipe/dockerfiles/blob/master/drupal8-apache/7.0/README.md&#34;&gt;README&lt;/a&gt; for the prebuilt image lists the arguments that can be passed when it is initialised, including environment variables. The repository project code is copied onto the image and a script is run which will do things like install the vendors with composer.&lt;/p&gt;

&lt;p&gt;The demo project also includes an example &lt;code&gt;docker-compose.yml&lt;/code&gt; file in the project root.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;docker-compose.yml&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;version: &#39;2&#39;
services:
  web:
    build:
      context: .
      args:
        - GITHUB_TOKEN
        - CODE_OWNER=build
        - CODE_GROUP=build
        - APP_USER=www-data
        - APP_GROUP=www-data
    links:
      - database
    environment:
      - GITHUB_TOKEN
      - WEB_HTTP=true
      - WEB_HTTPS=false
      - DRUPAL_HASH_SALT=sosecret
      - DRUPAL_DATABASE_NAME=drupaldb
      - DRUPAL_DATABASE_USERNAME=drupal
      - DRUPAL_DATABASE_PASSWORD=drupal
      - DRUPAL_DATABASE_HOST=database
      - DRUPAL_DATABASE_PORT=3306
      - DEVELOPMENT_MODE=0
      - DRUPAL_ADMIN_USERNAME=drupaluser
      - DRUPAL_ADMIN_PASSWORD=drupalpass
    expose:
      - 80

  database:
    image: quay.io/continuouspipe/mysql5.6:v1.0
    environment:
      MYSQL_ROOT_PASSWORD: drupal
      MYSQL_DATABASE: drupaldb
      MYSQL_USER: drupal
      MYSQL_PASSWORD: drupal
    expose:
      - 3306

&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;ContinuousPipe uses the &lt;code&gt;docker-compose.yml&lt;/code&gt; configuration to know how to build and configure the services that it deploys. Here we deploy the minimum requirements for Drupal 8 - a web service and a database.&lt;/p&gt;

&lt;h3 id=&#34;adding-continuouspipe-configuration-file&#34;&gt;Adding ContinuousPipe Configuration File&lt;/h3&gt;

&lt;p&gt;The demo project contains  a &lt;code&gt;continuous-pipe.yml&lt;/code&gt; file in the project root with a basic configuration.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;continuous-pipe.yml&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;variables:
  - name: CP_ENVIRONMENT
    value: prod

tasks:
  images:
    build:
      services:
        web:
          image: ${IMAGE_NAME}
          naming_strategy: sha1

  db_deployment:
    deploy:
      cluster: ${CLUSTER}
      environment:
        name: &#39;&amp;quot;demo-drupal8-&amp;quot; ~ code_reference.branch&#39;
      services:
        database:
          specification:
            volumes:
              - type: persistent
                name: database-volume
                capacity: 5Gi
                storage_class: default
            volume_mounts:
              - name: database-volume
                mount_path: /var/lib/mysql
            command:
              - /usr/local/bin/docker-entrypoint.sh
              - mysqld
              - --ignore-db-dir=lost+found
              - --max_allowed_packet=128M
            ports:
              - 3306
            resources:
              requests:
                cpu: 50m
                memory: 250Mi
              limits:
                cpu: 500m
                memory: 2Gi
            environment_variables:
              - name: MYSQL_ROOT_PASSWORD
                value: ${DATABASE_ROOT_PASSWORD}
              - name: MYSQL_USER
                value: ${DRUPAL_DATABASE_USERNAME}
              - name: MYSQL_PASSWORD
                value: ${DRUPAL_DATABASE_PASSWORD}
              - name: MYSQL_DATABASE
                value: ${DRUPAL_DATABASE_NAME}
          deployment_strategy:
              readiness_probe:
                 type: tcp
                 port: 3306

  web_deployment:
    deploy:
      cluster: ${CLUSTER}
      environment:
        name: &#39;&amp;quot;demo-drupal8-&amp;quot; ~ code_reference.branch&#39;
      services:
        web:
          specification:
            accessibility:
              from_external: true
            volumes:
              - type: persistent
                name: web-public-files-volume
                capacity: 5Gi
                storage_class: default
            volume_mounts:
              - name: web-public-files-volume
                mount_path: /app/docroot/sites/default/files
            environment_variables: &amp;amp;default_web_variables
              - name: DRUPAL_DATABASE_NAME
                value: ${DRUPAL_DATABASE_NAME}
              - name: DRUPAL_DATABASE_USERNAME
                value: ${DRUPAL_DATABASE_USERNAME}
              - name: DRUPAL_DATABASE_PASSWORD
                value: ${DRUPAL_DATABASE_PASSWORD}
              - name: DRUPAL_DATABASE_PREFIX
                value: ${DRUPAL_DATABASE_PREFIX}
              - name: DRUPAL_DATABASE_HOST
                value: ${DRUPAL_DATABASE_HOST}
              - name: DRUPAL_DATABASE_PORT
                value: ${DRUPAL_DATABASE_PORT}
              - name: CP_ENVIRONMENT
                value: ${CP_ENVIRONMENT}
              - name: INSTALL_DRUPAL
                value: ${INSTALL_DRUPAL}
              - name: DRUPAL_ADMIN_USERNAME
                value: ${DRUPAL_ADMIN_USERNAME}
              - name: DRUPAL_ADMIN_PASSWORD
                value: ${DRUPAL_ADMIN_PASSWORD}
              - name: DEVELOPMENT_MODE
                value: ${DEVELOPMENT_MODE}
            ports:
              - 80
            resources:
              requests:
                cpu: 50m
                memory: 500Mi
              limits:
                cpu: 1
                memory: 2G

  drupal_demo_install:
    run:
      cluster: ${CLUSTER}
      environment:
        name: &#39;&amp;quot;demo-drupal8-&amp;quot; ~ code_reference.branch&#39;
      image:
        from_service: web
      commands:
        - container drupal_install
      environment_variables: *default_web_variables


pipelines:
  - name: Remote development
    condition: code_reference.branch matches &amp;quot;/^cpdev/&amp;quot;
    tasks: &amp;amp;default_tasks
      - images
      - db_deployment
      - drupal_demo_install
      - web_deployment
    variables:
      - name: CP_ENVIRONMENT
        value: dev

  - name: Production
    condition: &#39;not(code_reference.branch matches &amp;quot;/^cpdev/&amp;quot;)&#39;
    tasks: *default_tasks

&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;This defines four tasks for ContinuousPipe.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;images&lt;/code&gt; builds a Docker image for the web service based on the matching configuration for the web service in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file. The built image will include the repository contents in the commit that triggered the build (because of the instructions in the &lt;code&gt;Dockerfile&lt;/code&gt; in the previous step). Once the image is built ContinuousPipe will push it to an image registry configured using the &lt;code&gt;IMAGE_NAME&lt;/code&gt; variable (setting this variable is explained later).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;db_deployment&lt;/code&gt; deploys the database services to a cluster set with the &lt;code&gt;CLUSTER&lt;/code&gt; variable (setting this variable is explained later). The environment name used to refer to the deployment is made consistent by combining &lt;code&gt;demo-drupal8-&lt;/code&gt; with the name of the branch that triggered the process.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;web_deployment&lt;/code&gt; deploys the web container running apache.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drupal_demo_install&lt;/code&gt; - runs the intial Drupal installation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The ContinousPipe documentation has more information about &lt;a href=&#34;/docs/docs/configuration/tasks/&#34;&gt;tasks&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;configuring-the-continuouspipe-console&#34;&gt;Configuring the ContinuousPipe Console&lt;/h3&gt;

&lt;p&gt;Before we can push any code to our repository, we need to ensure that the ContinuousPipe console is properly configured. Please refer to the ContinuousPipe Quick Start guide to setup your &lt;a href=&#34;/docs/docs/quick-start/creating-a-project/&#34;&gt;project&lt;/a&gt;, &lt;a href=&#34;/docs/docs/quick-start/configuring-a-cluster/&#34;&gt;cluster&lt;/a&gt;, &lt;a href=&#34;/docs/docs/quick-start/configuring-a-registry/&#34;&gt;registry&lt;/a&gt; and create your first &lt;a href=&#34;/docs/docs/quick-start/creating-a-flow/&#34;&gt;flow&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;adding-variables-to-the-continuouspipe-console&#34;&gt;Adding Variables to the ContinuousPipe Console&lt;/h3&gt;

&lt;p&gt;When creating the &lt;code&gt;continuous-pipe.yml&lt;/code&gt; above an &lt;code&gt;IMAGE_NAME&lt;/code&gt; and &lt;code&gt;CLUSTER&lt;/code&gt; variable were used. These can now be added in the configuration section of the new flow within the ContinuousPipe console. This is explained in &lt;a href=&#34;/docs/docs/quick-start/configuring-a-flow/&#34;&gt;configuring a flow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;CLUSTER&lt;/code&gt; value you need can be found in the &amp;ldquo;Clusters&amp;rdquo; tab of the project. If you manually entered the Kubernetes cluster details you will have set the value yourself. If you used a Google linked account the value will have been set when setting up the Google Container Engine.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;IMAGE_NAME&lt;/code&gt; value is the path where the Docker image should be pushed to. This needs to be the full name, including the Docker repo and account e.g. &lt;code&gt;docker.io/continuouspipe/demo-drupal8&lt;/code&gt;. If you don&amp;rsquo;t yet have a Docker repo nor do you know how to create one, please refer to the &lt;a href=&#34;https://docs.docker.com/docker-hub/repos/&#34;&gt;Docker Hub repositories documentation&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;The variables can also have their values provided in the &lt;code&gt;continuous-pipe.yml&lt;/code&gt; file as is done below for the symfony environment. Keeping them out of the file and in the ContinuousPipe console allows you to keep them out of your code repository.&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&#34;initiating-a-tide&#34;&gt;Initiating a Tide&lt;/h3&gt;

&lt;p&gt;Commit any changes if not already done and push them to your code repository. You should be able to see that a tide was triggered on the overview or tides pages for the flow on &lt;a href=&#34;https://your-ui.example.com&#34;&gt;https://your-ui.example.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/docs/docs/images/guides/drupal/cp-tide-running.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Clicking on the status will show more details of the build progressing. Some steps, particularly building the image and pushing it to the registry, may take a while to complete. Once it has completed running successfully you can view the environment and from there open the web service and see the running application. The default Drupal page should be visible.&lt;/p&gt;

&lt;h2 id=&#34;remote-development-with-continuouspipe&#34;&gt;Remote Development with ContinuousPipe&lt;/h2&gt;

&lt;h3 id=&#34;install-the-client&#34;&gt;Install the Client&lt;/h3&gt;

&lt;p&gt;To use ContinuousPipe as a remote development environment you will need the &lt;code&gt;cp-remote&lt;/code&gt; client, which is available on OSX, Linux and Windows. Please refer to the &lt;a href=&#34;/docs/docs/remote-development/getting-started/#installation&#34;&gt;remote development installation instructions&lt;/a&gt; for each of the platforms.&lt;/p&gt;

&lt;h3 id=&#34;run-setup&#34;&gt;Run Setup&lt;/h3&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt; cp-remote setup
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will now be asked a series of questions that relate to how you have configured ContinuousPipe and your cluster details. Please refer to the &lt;a href=&#34;/docs/docs/remote-development/command-setup/&#34;&gt;remote development setup instructions&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h3 id=&#34;build-the-remote-environment&#34;&gt;Build the Remote Environment&lt;/h3&gt;

&lt;p&gt;To create the remote development environment run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;cp-remote build
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will force push the current commit you have checked out as the remote environment branch. So assuming you are still on the master branch and at the commit that successfully created an environment, this will be used to create your initial remote environment. You can rerun the &lt;code&gt;cp-remote build&lt;/code&gt; command to rebuild the remote environment with whatever you have checked out at that point as needed. However, you should not need to do this frequently if you use &lt;code&gt;cp-remote watch&lt;/code&gt; to sync changes to your remote environment as you make them (explained below).&lt;/p&gt;

&lt;h3 id=&#34;development-mode&#34;&gt;Development Mode&lt;/h3&gt;

&lt;p&gt;The default configuration described above has two build pipelines defined.
This adds two different pipelines which use conditions to determine which pipeline is used. In this case it checks if the branch starts with &lt;code&gt;cpdev&lt;/code&gt; - if it does then the Remote pipeline is used, if not the Production pipeline is used. You could use this to run different tasks but here the same tasks are run but variables have different values set. The YAML variable being used is named &lt;code&gt;CP_ENVIRONMENT&lt;/code&gt; which is declared and initialised to “prod” at the top of the file. It stays as “prod” for the Production pipeline but is set to “dev” for remote environments.&lt;/p&gt;

&lt;h3 id=&#34;rebuild-the-remote-environment&#34;&gt;Rebuild the Remote Environment&lt;/h3&gt;

&lt;p&gt;To rebuild the remote environment with these changes, commit them to &lt;code&gt;master&lt;/code&gt; and run &lt;code&gt;cp-remote build&lt;/code&gt; - this will establish the Production pipeline. You can now switch to a branch prefixed with &lt;code&gt;cpdev&lt;/code&gt; and run &lt;code&gt;cp-remote build&lt;/code&gt; again to establish the Remote pipeline. You will then see the two new pipelines on the overview page in the ContinuousPipe console.&lt;/p&gt;

&lt;h3 id=&#34;start-development&#34;&gt;Start Development&lt;/h3&gt;

&lt;p&gt;To start development run:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cp-remote watch&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can now make changes and they will be synced to the remote environment where you should be able to see the result.&lt;/p&gt;

&lt;h3 id=&#34;configuration-management-in-drupal-8&#34;&gt;Configuration Management in Drupal 8&lt;/h3&gt;

&lt;p&gt;The main workflow adjustment you will have to make for Drupal 8 remote development is using &lt;code&gt;cp-watch&lt;/code&gt; to sync your changes. For example, if you want to make a change to configuration, take the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make the change in the UI of the remote environment.&lt;/li&gt;
&lt;li&gt;Export as a feature or using Configuration Export&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cp-remote fetch&lt;/code&gt; will rsync the files from the container back to your local machine&lt;/li&gt;
&lt;li&gt;Commit the changes in Git&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are doing custom development, any change you make will immediately be on the container as soon as you save via &lt;code&gt;cp-watch&lt;/code&gt; (including deletion).&lt;/p&gt;

&lt;h3 id=&#34;drush-and-drupal-console&#34;&gt;Drush and Drupal Console&lt;/h3&gt;

&lt;p&gt;Drush and Drupal Console are both available in this demonstration setup. To use them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;cp-remote bash
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will then have a bash shell open on the web container.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting up Xdebug on a Remote Environment</title>
      <link>/docs/guides/remote-environment-xdebug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/guides/remote-environment-xdebug/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This is a guide to setting up &lt;a href=&#34;https://xdebug.org/&#34;&gt;Xdebug&lt;/a&gt; on a ContinuousPipe remote environment.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;Before getting started you will need to have read or understand the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic Xdebug setup and usage - see &lt;a href=&#34;https://www.sitepoint.com/debugging-and-profiling-php-with-xdebug&#34;&gt;https://www.sitepoint.com/debugging-and-profiling-php-with-xdebug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Setting up an environment in ContinuousPipe - see the &lt;a href=&#34;/docs/docs/quick-start/creating-a-project/&#34;&gt;quick start guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Setting up a remote development environment in ContinuousPipe - see the &lt;a href=&#34;/docs/docs/quick-start/remote-development-installing-the-client/&#34;&gt;remote development quick start guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, we are going to use the ContinuousPipe Symfony demo app, so reading the &lt;a href=&#34;/docs/docs/guides/symfony/&#34;&gt;getting started with Symfony guide&lt;/a&gt; will help too.&lt;/p&gt;

&lt;h2 id=&#34;configuring-your-repository&#34;&gt;Configuring Your Repository&lt;/h2&gt;

&lt;p&gt;As mentioned above, this guide will use the ContinuousPipe Symfony demo app. The files that are modified below can be found in the &lt;a href=&#34;https://github.com/continuouspipe/demo-symfony&#34;&gt;ContinuousPipe demo-symfony repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Below is a summary of the files that will be modified (M) or added (A) to configure the repository:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  .
M ├── Dockerfile
M ├── continuous-pipe.yml
M ├── docker-compose.yml
  └── docker/
    └── etc/
      └── php/
        └── 7.1/
          └── fpm/
            └── conf.d/
A             └── 20-xdebug.ini
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;installing-xdebug&#34;&gt;Installing Xdebug&lt;/h3&gt;

&lt;p&gt;The first step is to install Xdebug on the remote environment. This can be done by adding the following instructions to the Dockerfile:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt; quay.io/continuouspipe/symfony-php7.1-nginx:latest&lt;/span&gt;
ARG &lt;span style=&#34;color: #f8f8f2&#34;&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;
ARG &lt;span style=&#34;color: #f8f8f2&#34;&gt;SYMFONY_ENV&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;prod
&lt;span style=&#34;color: #66d9ef&#34;&gt;ENV&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt; SYMFONY_ENV $SYMFONY_ENV&lt;/span&gt;

&lt;span style=&#34;background-color: #49483e&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;RUN&lt;/span&gt; apt-get update -qq -y &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #49483e&#34;&gt;    &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;DEBIAN_FRONTEND&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;noninteractive apt-get -qq -y --no-install-recommends install php-xdebug &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #49483e&#34;&gt;    &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get auto-remove -qq -y &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #49483e&#34;&gt;    &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get clean
&lt;/span&gt;&lt;span style=&#34;background-color: #49483e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #49483e&#34;&gt;COPY docker/etc/ /etc/
&lt;/span&gt;
COPY . /app
&lt;span style=&#34;color: #66d9ef&#34;&gt;RUN&lt;/span&gt; container build
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Lines 6-9:&lt;/strong&gt; The RUN instruction tells Docker to install the &lt;code&gt;php-xdebug&lt;/code&gt; module on the image using &lt;code&gt;apt-get&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 11:&lt;/strong&gt; Then the COPY instruction tells Docker to copy files from &lt;code&gt;docker/etc/&lt;/code&gt; in the repository to &lt;code&gt;/etc&lt;/code&gt; on the image filesystem.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, the COPY instruction expects the Xdebug configuration to be present in the repository, in this case under the &lt;code&gt;docker/etc/&lt;/code&gt; directory.&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;The exact location of the configuration will depend on the image you are using. For the &lt;code&gt;quay.io/continuouspipe/symfony-php7.1-nginx&lt;/code&gt; &lt;a href=&#34;/docs/docs/faq/what-are-the-continuous-pipe-images/&#34;&gt;ContinuousPipe image&lt;/a&gt; the Xdebug configuration file is at &amp;ldquo;/etc/php/7.1/fpm/conf.d/20-xdebug.ini&amp;rdquo;, however you may need to change this path according to your PHP version.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;The following file therefore needs to be created in the repository at &amp;ldquo;docker/etc/php/7.1/fpm/conf.d/20-xdebug.ini&amp;rdquo;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;20-xdebug.ini&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;zend_extension=xdebug.so
xdebug.remote_enable=1
xdebug.remote_port=9000
xdebug.remote_host=sshforward
xdebug.remote_log=
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;This will enable remote debugging on port 9000, using the &amp;ldquo;sshforward&amp;rdquo; host. Details on setting up the &amp;ldquo;sshforward&amp;rdquo; host are in the next section of the guide.&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;With the instructions above Xdebug is always set up irrespective of environment. Instructions on how to make this conditional on the environment can be found in &lt;a href=&#34;#appendix-b-making-the-php-configuration-conditional&#34;&gt;Appendix B&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;If you are using a ContinuousPipe base image you will also need to disable Tideways. This is necessary as Tideways loads an &lt;a href=&#34;http://php.net/manual/en/ini.core.php#ini.auto-prepend-file&#34;&gt;auto prepend file&lt;/a&gt;, which means the Xdebug client mistakes it for the application entry point.&lt;/p&gt;

&lt;p&gt;Basic instructions on how to disable Tideways can be found in &lt;a href=&#34;#appendix-c-disabling-tideways-basic-configuration-using-copy&#34;&gt;Appendix C&lt;/a&gt;. If you have followed the instructions in Appendix B please refer to &lt;a href=&#34;#appendix-d-disabling-tideways-advanced-configuration-using-confd&#34;&gt;Appendix D&lt;/a&gt; instead.&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&#34;installing-ssh-forward&#34;&gt;Installing SSH Forward&lt;/h3&gt;

&lt;p&gt;The next step is to configure your project to use the &lt;a href=&#34;https://github.com/continuouspipe/dockerfiles/tree/master/ssh-forward&#34;&gt;ContinuousPipe SSH Forward&lt;/a&gt; image. This is needed to allow port forwarding to be set up from your local machine to the pod your environment is running on.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;docker-compose.yml&lt;/code&gt; file needs editing as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;docker-compose.yml&lt;/strong&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;version&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #ae81ff&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
&lt;span style=&#34;background-color: #49483e&#34;&gt;    &lt;span style=&#34;color: #ae81ff&#34;&gt;sshforward&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #49483e&#34;&gt;        &lt;span style=&#34;color: #ae81ff&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;quay.io/continuouspipe/ssh-forward:latest&lt;/span&gt;
&lt;/span&gt;    &lt;span style=&#34;color: #ae81ff&#34;&gt;web&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;.&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;expose&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;80&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;443&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;ports&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;8080:80&amp;quot;&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;443:443&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;volumes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;.:/app&lt;/span&gt;
&lt;span style=&#34;background-color: #49483e&#34;&gt;        &lt;span style=&#34;color: #ae81ff&#34;&gt;depends_on&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #49483e&#34;&gt;            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;sshforward&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Lines 3-4:&lt;/strong&gt; A new service &lt;code&gt;sshforward&lt;/code&gt; is added, specifying the &amp;ldquo;quay.io/continuouspipe/ssh-forward&amp;rdquo; image.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lines 15-16:&lt;/strong&gt; The &lt;code&gt;sshforward&lt;/code&gt; service is declared as a dependency of the &lt;code&gt;web&lt;/code&gt; service.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;continuous-pipe.yml&lt;/code&gt; file needs editing as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;continuous-pipe.yml&lt;/strong&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;variables&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;SYMFONY_ENV&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;prod&lt;/span&gt;

&lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;images&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color: #ae81ff&#34;&gt;web&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                    &lt;span style=&#34;color: #ae81ff&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${IMAGE_NAME}&lt;/span&gt;
                    &lt;span style=&#34;color: #ae81ff&#34;&gt;naming_strategy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;sha1&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;deployment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;deploy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;cluster&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${CLUSTER}&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;environment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;quot;sfdemo-&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;code_reference.branch&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
&lt;span style=&#34;background-color: #49483e&#34;&gt;                &lt;span style=&#34;color: #ae81ff&#34;&gt;sshforward&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #49483e&#34;&gt;                    &lt;span style=&#34;color: #ae81ff&#34;&gt;condition&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;code_reference.branch&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;matches&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/^cpdev/&amp;quot;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #49483e&#34;&gt;                    &lt;span style=&#34;color: #ae81ff&#34;&gt;specification&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #49483e&#34;&gt;                        &lt;span style=&#34;color: #ae81ff&#34;&gt;ports&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #49483e&#34;&gt;                            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;9000&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #49483e&#34;&gt;                        &lt;span style=&#34;color: #ae81ff&#34;&gt;environment_variables&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #49483e&#34;&gt;                            &lt;span style=&#34;color: #ae81ff&#34;&gt;SSH_FORWARD_PASSWORD&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${SSH_FORWARD_PASSWORD}&lt;/span&gt;
&lt;/span&gt;                &lt;span style=&#34;color: #ae81ff&#34;&gt;web&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                    &lt;span style=&#34;color: #ae81ff&#34;&gt;specification&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                        &lt;span style=&#34;color: #ae81ff&#34;&gt;accessibility&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                            &lt;span style=&#34;color: #ae81ff&#34;&gt;from_external&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;true&lt;/span&gt;
                        &lt;span style=&#34;color: #ae81ff&#34;&gt;environment_variables&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;SYMFONY_ENV&lt;/span&gt;
                              &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${SYMFONY_ENV}&lt;/span&gt;

&lt;span style=&#34;color: #ae81ff&#34;&gt;pipelines&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;Production&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;condition&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;code_reference.branch&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;[&amp;quot;master&amp;quot;]&amp;#39;&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;images,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;deployment&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;Feature&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;condition&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;code_reference.branch&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;matches&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/^feature/&amp;quot;&amp;#39;&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;images,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;deployment&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;Remote&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;condition&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;code_reference.branch&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;matches&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/^cpdev/&amp;quot;&amp;#39;&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;images,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;deployment&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;variables&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;SYMFONY_ENV&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;dev&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Line 18:&lt;/strong&gt; A new service &lt;code&gt;sshforward&lt;/code&gt; is added.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line 19:&lt;/strong&gt; A condition restricts the service to deployments for remote development branches i.e. branches that start with the string &amp;ldquo;cpdev&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lines 21-22:&lt;/strong&gt; The service will use port 9000.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lines 23-24:&lt;/strong&gt; A password for the service is specified by passing in the enviromental variable &lt;code&gt;SSH_FORWARD_PASSWORD&lt;/code&gt;. This references a YAML variable, also called &lt;code&gt;SSH_FORWARD_PASSWORD&lt;/code&gt; - this needs setting as a variable in the ContinuousPipe console, as explained in &lt;a href=&#34;/docs/docs/quick-start/configuring-a-flow/&#34;&gt;configuring a flow&lt;/a&gt;. Additionally, it need to be encrypted. This can be done by clicking the padlock icon when entering the values into the flow configuration, before saving.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;The password you set will be needed later when running the port forwarding command from a terminal.&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;specification&lt;/code&gt; has no &lt;code&gt;accessibility&lt;/code&gt; section, so will only be accessible from within the cluster i.e. it deliberately has no external IP address.&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&#34;committing-modifications&#34;&gt;Committing Modifications&lt;/h3&gt;

&lt;h4 id=&#34;permanent-repository-modification&#34;&gt;Permanent Repository Modification&lt;/h4&gt;

&lt;p&gt;If you are permanently modifying your repository configuration to support Xdebug, the file changes now need to be committed and pushed. You will then need to make sure that your local working branch contains the permanent changes.&lt;/p&gt;

&lt;h4 id=&#34;temporary-repository-modification&#34;&gt;Temporary Repository Modification&lt;/h4&gt;

&lt;p&gt;If you are temporarily modifying your repository configuration to support Xdebug, the file changes must at a minimum be committed locally on your working branch.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-remote-development-environment&#34;&gt;Creating a Remote Development Environment&lt;/h2&gt;

&lt;p&gt;You now need to set up a remote development environment using the ContinuousPipe console. See the &lt;a href=&#34;/docs/docs/quick-start/remote-development-installing-the-client/&#34;&gt;remote development quick start guide&lt;/a&gt; for instructions on how to do this.&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;If you have already built a remote environment, you will need to rebuild it using &lt;code&gt;cp-remote build&lt;/code&gt; to ensure that the latest configuration changes are present.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;If you review the tide progress for the new environment, you should see that the &amp;ldquo;sshforward&amp;rdquo; pod has been created:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/docs/docs/images/guides/remote-environment-xdebug/cp-tide-service-sshforward.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You should also be able verify the environment using the &lt;code&gt;cp-remote pods&lt;/code&gt; command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; cp-remote pods
checking connection for environment sfdemo-cpdev-pswaine
2 pods have been found:
NAMESPACE              NAME                          READY     STATUS    RESTARTS   AGE       IP           NODE
sfdemo-cpdev-pswaine   sshforward-2105229106-0vlrl   1/1       Running   0          10m       10.0.0.112   gke-cp-internal-pool-4cpu-15gb-878b5c33-pnr8
sfdemo-cpdev-pswaine   web-367352278-hrh65           1/1       Running   0          10m       10.0.4.134   gke-cp-internal-pool-4cpu-15gb-878b5c33-cf1q
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;setting-up-port-forwarding&#34;&gt;Setting Up Port Forwarding&lt;/h2&gt;

&lt;p&gt;You can now set up port forwarding between your local machine and the remote environment as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; cp-remote forward -s sshforward 2222:22 2&amp;gt;&amp;amp;1 &amp;gt; /dev/null &amp;amp;
[1] 38242
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we use &lt;code&gt;cp-remote&lt;/code&gt; to forward the local port 2222 to port 22 on the remote &amp;ldquo;sshforward&amp;rdquo; pod. The command is run as a background process.&lt;/p&gt;

&lt;p&gt;You can now use ssh over port 2222 to set up an ssh tunnel:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; ssh -p 2222 forward@localhost -N -R 9000:localhost:9000
The authenticity of host &amp;#39;[localhost]:2222 ([::1]:2222)&amp;#39; can&amp;#39;t be established.
ECDSA key fingerprint is SHA256:*******************************************.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &amp;#39;[localhost]:2222&amp;#39; (ECDSA) to the list of known hosts.
forward@localhost&amp;#39;s password: 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we connect to the &amp;ldquo;sshforward&amp;rdquo; pod using port 2222, then use the &amp;ldquo;forward&amp;rdquo; user to create a tunnel beween port 9000 on the local machine and port 9000 on the remote environment. The &amp;ldquo;forward&amp;rdquo; user was created when the &amp;ldquo;sshforward&amp;rdquo; service was deployed, with the password set to the value configured in the flow (as described above). As you can see, this password now needs to be entered into the terminal to permit the tunnel to be set up.&lt;/p&gt;

&lt;h2 id=&#34;using-xdebug&#34;&gt;Using Xdebug&lt;/h2&gt;

&lt;div class=&#34;admonition note&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Note&lt;/p&gt;
&lt;p&gt;This section is deliberately brief, as the process of using an Xdebug client is nearly the same using a remote environment as when your code is running locally.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;At this point you should be able to initiate Xdebug debugging in your application, as if the code on the remote environment was on your local machine. You will need to ensure that your browser is configured to trigger remote Xdebug sessions (usually using a plugin) and that your IDE is configured to listen on port 9000 for incoming connections.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;appendix-a-troubleshooting&#34;&gt;Appendix A: Troubleshooting&lt;/h2&gt;

&lt;h3 id=&#34;the-sshforward-service-is-not-installed&#34;&gt;The Sshforward Service Is Not Installed&lt;/h3&gt;

&lt;p&gt;If the &amp;ldquo;sshforward&amp;rdquo; service is not installed, check that environment was built using a branch starting with &amp;ldquo;cpdev&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;xdebug-is-installed-but-not-configured&#34;&gt;Xdebug Is Installed but Not Configured&lt;/h3&gt;

&lt;p&gt;Xdebug needs to have the following settings configured:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Setting&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;xdebug.remote_enable&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xdebug.remote_port&lt;/td&gt;
&lt;td&gt;9000&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;xdebug.remote_host&lt;/td&gt;
&lt;td&gt;sshforward&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If these are not set, ensure that the Xdebug ini has been deployed sucessfully:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; cp-remote exec -s web -- ls -la /etc/php/7.1/fpm/conf.d/20-xdebug.ini
  -rw-rw-r-- 3 root root 102 May  8 10:51 /etc/php/7.1/fpm/conf.d/20-xdebug.ini
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;If the ini has not been deployed, check that the path is correct in your local repository.&lt;/li&gt;
&lt;li&gt;If you are using a different base image, you may need to change the path of the Xdebug ini.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;xdebug-is-connecting-but-hanging-up-immediately&#34;&gt;Xdebug Is Connecting But Hanging Up Immediately&lt;/h3&gt;

&lt;p&gt;To debug this issue, you will need to enable Xdebug logging on your container. You can do this by running &lt;code&gt;cp-remote bash -s web&lt;/code&gt; and editing &amp;ldquo;/etc/php/7.1/fpm/conf.d/20-xdebug.ini&amp;rdquo; to add the setting &amp;ldquo;xdebug.remote_log=/tmp/xdebug.log&amp;rdquo;. You will then need to restart php-fpm using &lt;code&gt;service php7.1-fpm restart&lt;/code&gt;. You can then review Xdebug activity for subsequent requests by tailing the contents of the file &amp;ldquo;/tmp/xdebug.log&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Sometimes you will see the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I: Connecting to configured address/port: sshforward:9000.
I: Connected to client. :-)
-&amp;gt; &amp;lt;init xmlns=&amp;quot;urn:debugger_protocol_v1&amp;quot; xmlns:xdebug=&amp;quot;http://xdebug.org/dbgp/xdebug&amp;quot; fileuri=&amp;quot;file:///app/web/app.php&amp;quot; language=&amp;quot;PHP&amp;quot; xdebug:language_version=&amp;quot;7.0.4-5ubuntu1&amp;quot; protocol_version=&amp;quot;1.0&amp;quot; appid=&amp;quot;389&amp;quot; idekey=&amp;quot;markross&amp;quot;&amp;gt;&amp;lt;engine version=&amp;quot;2.4.0&amp;quot;&amp;gt;&amp;lt;![CDATA[Xdebug]]&amp;gt;&amp;lt;/engine&amp;gt;&amp;lt;author&amp;gt;&amp;lt;![CDATA[Derick Rethans]]&amp;gt;&amp;lt;/author&amp;gt;&amp;lt;url&amp;gt;&amp;lt;![CDATA[http://xdebug.org]]&amp;gt;&amp;lt;/url&amp;gt;&amp;lt;copyright&amp;gt;&amp;lt;![CDATA[Copyright (c) 2002-2016 by Derick Rethans]]&amp;gt;&amp;lt;/copyright&amp;gt;&amp;lt;/init&amp;gt;

-&amp;gt; &amp;lt;response xmlns=&amp;quot;urn:debugger_protocol_v1&amp;quot; xmlns:xdebug=&amp;quot;http://xdebug.org/dbgp/xdebug&amp;quot; status=&amp;quot;stopping&amp;quot; reason=&amp;quot;ok&amp;quot;&amp;gt;&amp;lt;/response&amp;gt;

Log closed at 2017-05-12 10:04:32
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means that Xdebug is connecting to port 9000 on your local machine, but not getting the correct response so the session is immediately terminated. You can debug this by checking what is listening on port 9000 on your local machine using the command &lt;code&gt;lsof -n -i:9000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the following example we see that nothing is listening on port 9000 - so the Xdebug client configuration needs checking:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; lsof  -n -i:9000
&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the following example we see that a local version of php-fpm is listening on that port - so local PHP will need to be reconfigured:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; lsof  -n -i:9000
COMMAND   PID     USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME
php-fpm 15159 username    6u  IPv4 0x1d2a0f6d7ef000d5      0t0  TCP 127.0.0.1:cslistener (LISTEN)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ultimately you want to see your Xdebug client (here PhpStorm) in the output of the command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; lsof -n -i:9000
COMMAND    PID    USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME
phpstorm 71963 username   40u  IPv4 0x725301cef22311b5      0t0  TCP *:cslistener (LISTEN)
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;path-mapping&#34;&gt;Path Mapping&lt;/h3&gt;

&lt;p&gt;One problem you may encounter is that your IDE does not know how to map local file paths with remote file paths. If you are using PhpStorm this issue is resolved by &lt;a href=&#34;https://confluence.jetbrains.com/display/PhpStorm/Troubleshooting+PhpStorm+debugging#TroubleshootingPhpStormdebugging-Remotefilepathisnotmappedtoanyfilepathinproject&#34;&gt;setting up a path mapping&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;appendix-b-making-the-php-extension-configuration-conditional&#34;&gt;Appendix B: Making the PHP Extension Configuration Conditional&lt;/h2&gt;

&lt;p&gt;One problem you may have noticed with the instructions above is that Xdebug is always set up and Tideways is always disabled, irrespective of environment. Assuming that you are using one of the &lt;a href=&#34;/docs/docs/faq/what-are-the-continuous-pipe-images/&#34;&gt;ContinuousPipe images&lt;/a&gt;, you can make the configuration for these extensions conditional using &lt;a href=&#34;https://github.com/kelseyhightower/confd&#34;&gt;confd&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using confd, the single configuration file for each extension is replaced with two separate files:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A TOML file that describes a template file, output destination, permissions etc.&lt;/li&gt;
&lt;li&gt;A template file that can render different output dependent upon environment variables.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When &lt;code&gt;COPY docker/etc/ /etc/&lt;/code&gt; is run in the &lt;code&gt;Dockerfile&lt;/code&gt; the TOML files are processed and template content rendered.&lt;/p&gt;

&lt;p&gt;Below is a summary of the files that will be modified (M), added (A) or deleted (D) to update the repository configuration to support confd conditional templates:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  .
  ├── Dockerfile
M ├── continuous-pipe.yml
  ├── docker-compose.yml
  └── docker/
    └── etc/
      └── confd/
        └── conf.d/
          └── fpm/
A           └── php-fpm-xdebug.conf.toml
          └── templates/
            └── php-fpm/
A             └── xdebug.conf.tmpl
      └── php/
        └── 7.1/
          └── fpm/
            └── conf.d/
D             ├── 20-xdebug.ini
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the file &amp;ldquo;docker/etc/php/7.1/fpm/conf.d/20-xdebug.ini&amp;rdquo; created earlier need to be deleted.&lt;/p&gt;

&lt;p&gt;In its place, the following files need to be created at &amp;ldquo;docker/etc/confd/conf.d/php-fpm-xdebug.conf.toml&amp;rdquo; and &amp;ldquo;docker/etc/confd/templates/php-fpm/xdebug.conf.tmpl&amp;rdquo; respectively:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;php-fpm-xdebug.conf.toml&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[template]
src   = &amp;quot;php-fpm/xdebug.conf.tmpl&amp;quot;
dest  = &amp;quot;/etc/php/7.1/fpm/conf.d/20-xdebug.ini&amp;quot;
mode  = &amp;quot;0644&amp;quot;
keys = [
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;xdebug.conf.tmpl&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if getenv &amp;quot;XDEBUG_REMOTE_ENABLED&amp;quot; }}
zend_extension=xdebug.so
xdebug.remote_enable={{ getenv &amp;quot;XDEBUG_REMOTE_ENABLED&amp;quot; }}
xdebug.remote_host={{ getenv &amp;quot;XDEBUG_REMOTE_HOST&amp;quot; }}
xdebug.remote_port={{ getenv &amp;quot;XDEBUG_REMOTE_PORT&amp;quot; }}
xdebug.remote_log=
{{ else }}
;zend_extension=xdebug.so
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can see, the TOML file configures a template to use and the output destination. The template file looks for the environment variable of &lt;code&gt;XDEBUG_REMOTE_ENABLED&lt;/code&gt; before outputting an enabled Xdebug configuration, otherwise it outputs a disabled Xdebug configuration. The three &lt;code&gt;XDEBUG_REMOTE_*&lt;/code&gt; environment variables used in the template are explained below when &lt;code&gt;continuous-pipe.yml&lt;/code&gt; is modified.&lt;/p&gt;

&lt;p&gt;In order to actually set the three &lt;code&gt;XDEBUG_REMOTE_*&lt;/code&gt; environment variables, &lt;code&gt;continuous-pipe.yml&lt;/code&gt; needs modifying as follows.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;continuous-pipe.yml&lt;/strong&gt;
&lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;variables&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;SYMFONY_ENV&lt;/span&gt;
      &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;prod&lt;/span&gt;
&lt;span style=&#34;background-color: #49483e&#34;&gt;    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;XDEBUG_REMOTE_ENABLED&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #49483e&#34;&gt;      &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;~&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #49483e&#34;&gt;    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;XDEBUG_REMOTE_HOST&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #49483e&#34;&gt;      &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;~&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #49483e&#34;&gt;    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;XDEBUG_REMOTE_PORT&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #49483e&#34;&gt;      &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;~&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #49483e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;images&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color: #ae81ff&#34;&gt;web&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                    &lt;span style=&#34;color: #ae81ff&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${IMAGE_NAME}&lt;/span&gt;
                    &lt;span style=&#34;color: #ae81ff&#34;&gt;naming_strategy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;sha1&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;deployment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;deploy&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;cluster&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${CLUSTER}&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;environment&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;quot;sfdemo-&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;code_reference.branch&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color: #ae81ff&#34;&gt;services&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color: #ae81ff&#34;&gt;sshforward&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                    &lt;span style=&#34;color: #ae81ff&#34;&gt;condition&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;code_reference.branch&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;matches&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/^cpdev/&amp;quot;&amp;#39;&lt;/span&gt;
                    &lt;span style=&#34;color: #ae81ff&#34;&gt;specification&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                        &lt;span style=&#34;color: #ae81ff&#34;&gt;ports&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;9000&lt;/span&gt;
                        &lt;span style=&#34;color: #ae81ff&#34;&gt;environment_variables&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                            &lt;span style=&#34;color: #ae81ff&#34;&gt;SSH_FORWARD_PASSWORD&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${SSH_FORWARD_PASSWORD}&lt;/span&gt;
                &lt;span style=&#34;color: #ae81ff&#34;&gt;web&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                    &lt;span style=&#34;color: #ae81ff&#34;&gt;specification&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                        &lt;span style=&#34;color: #ae81ff&#34;&gt;accessibility&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                            &lt;span style=&#34;color: #ae81ff&#34;&gt;from_external&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;true&lt;/span&gt;
                        &lt;span style=&#34;color: #ae81ff&#34;&gt;environment_variables&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;SYMFONY_ENV&lt;/span&gt;
                              &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${SYMFONY_ENV}&lt;/span&gt;
&lt;span style=&#34;background-color: #49483e&#34;&gt;                            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;XDEBUG_REMOTE_ENABLED&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #49483e&#34;&gt;                              &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${XDEBUG_REMOTE_ENABLED}&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #49483e&#34;&gt;                            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;XDEBUG_REMOTE_HOST&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #49483e&#34;&gt;                              &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${XDEBUG_REMOTE_HOST}&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #49483e&#34;&gt;                            &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;XDEBUG_REMOTE_PORT&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #49483e&#34;&gt;                              &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;${XDEBUG_REMOTE_PORT}&lt;/span&gt;
&lt;/span&gt;
&lt;span style=&#34;color: #ae81ff&#34;&gt;pipelines&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;Production&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;condition&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;code_reference.branch&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;[&amp;quot;master&amp;quot;]&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;images,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;deployment&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;Feature&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;condition&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;code_reference.branch&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;matches&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/^feature/&amp;quot;&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;images,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;deployment&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;Remote&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;condition&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;code_reference.branch&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;matches&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/^cpdev/&amp;quot;&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;tasks&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;images,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;deployment&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;variables&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;SYMFONY_ENV&lt;/span&gt;
        &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;prod&lt;/span&gt;
&lt;span style=&#34;background-color: #49483e&#34;&gt;      &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;XDEBUG_REMOTE_ENABLED&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #49483e&#34;&gt;        &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #49483e&#34;&gt;      &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;XDEBUG_REMOTE_HOST&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #49483e&#34;&gt;        &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;sshforward&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #49483e&#34;&gt;      &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;XDEBUG_REMOTE_PORT&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #49483e&#34;&gt;        &lt;span style=&#34;color: #ae81ff&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;9000&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Lines 4-10:&lt;/strong&gt; Three YAML variables &lt;code&gt;XDEBUG_REMOTE_ENABLED&lt;/code&gt;, &lt;code&gt;XDEBUG_REMOTE_HOST&lt;/code&gt; and &lt;code&gt;XDEBUG_REMOTE_PORT&lt;/code&gt; are declared with empty values.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lines 38-43:&lt;/strong&gt; The three YAML variables are set as environmental variables with the same respective name.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lines 58-63:&lt;/strong&gt; The three YAML variables are set/populated when the Remote pipeline is used (which is when the branch name begins with &amp;ldquo;cpdev*&amp;ldquo;).&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;appendix-c-disabling-tideways-basic-configuration-using-copy&#34;&gt;Appendix C: Disabling Tideways - Basic Configuration Using Copy&lt;/h2&gt;

&lt;p&gt;If you are using a ContinuousPipe base image you will also need to disable Tideways. This is necessary as Tideways loads an &lt;a href=&#34;http://php.net/manual/en/ini.core.php#ini.auto-prepend-file&#34;&gt;auto prepend file&lt;/a&gt;, which means the Xdebug client mistakes it for the application entry point.&lt;/p&gt;

&lt;p&gt;This appendix contains the instructions to disable Tideways following the basic copy configuration strategy in the main body of this guide.&lt;/p&gt;

&lt;p&gt;Below is a summary of the file that will be added (A) to update the repository configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  .
  ├── Dockerfile
  ├── continuous-pipe.yml
  ├── docker-compose.yml
  └── docker/
    └── etc/
      └── php/
        └── 7.1/
          └── fpm/
            └── conf.d/
              ├── 20-xdebug.ini
A             └── 40-tideways.ini
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will need to create the following file in the repository at &amp;ldquo;docker/etc/php/7.1/fpm/conf.d/40-tideways.ini&amp;rdquo;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;40-tideways.ini&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;;extension=tideways.so
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;This very simply disables the Tideways extension by commenting it out.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;appendix-d-disabling-tideways-advanced-configuration-using-confd&#34;&gt;Appendix D: Disabling Tideways - Advanced Configuration Using Confd&lt;/h2&gt;

&lt;p&gt;If you are using a ContinuousPipe base image you will also need to disable Tideways. This is necessary as Tideways loads an &lt;a href=&#34;http://php.net/manual/en/ini.core.php#ini.auto-prepend-file&#34;&gt;auto prepend file&lt;/a&gt;, which means the Xdebug client mistakes it for the application entry point.&lt;/p&gt;

&lt;p&gt;This appendix contains the instructions to disable Tideways following the confd configuration strategy in &lt;a href=&#34;#appendix-b-making-the-php-configuration-conditional&#34;&gt;Appendix B&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Below is a summary of the files that will be added (A) or deleted (D) to update the repository configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  .
  ├── Dockerfile
  ├── continuous-pipe.yml
  ├── docker-compose.yml
  └── docker/
    └── etc/
      └── confd/
        └── conf.d/
          └── fpm/
A           ├── php-fpm-tideways.conf.toml
            └── php-fpm-xdebug.conf.toml
          └── templates/
            └── php-fpm/
A             ├── tideways.conf.tmpl
              └── xdebug.conf.tmpl
      └── php/
        └── 7.1/
          └── fpm/
            └── conf.d/
              ├── 20-xdebug.ini
D             └── 40-tideways.ini
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The the following files need to be created at &amp;ldquo;docker/etc/confd/conf.d/php-fpm-tideways.conf.toml&amp;rdquo; and &amp;ldquo;docker/etc/confd/templates/php-fpm/tideways.conf.tmpl&amp;rdquo; respectively:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;php-fpm-tideways.conf.toml&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[template]
src   = &amp;quot;php-fpm/tideways.conf.tmpl&amp;quot;
dest  = &amp;quot;/etc/php/7.1/fpm/conf.d/40-tideways.ini&amp;quot;
mode  = &amp;quot;0644&amp;quot;
keys = [
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;tideways.conf.tmpl&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if getenv &amp;quot;XDEBUG_REMOTE_ENABLED&amp;quot; }}
;extension=tideways.so
{{ else }}
; Configuration for Tideways Profiler Extension
; priority=40
extension=tideways.so

; Tideways Application API-Key to configure when using just one application on
; this php installation.
;tideways.api_key=

; Configure the profiling sample rate for this PHP server globally.  The given
; number is an integer representing percent between 0 and 100
tideways.sample_rate=25

; Automatically detect transactions and exceptions of a given framework The
; following frameworks are currently supported:
;
; symfony2, symfony2c, shopware, oxid, magento, zend1, zend2, laravel,
; wordpress
;tideways.framework=
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can see, the confd setup for Tideways follows very similar logic to the confd setup for Xdebug. However, the process is reversed, with a disabled Tideways configuration being outputted if &lt;code&gt;XDEBUG_REMOTE_ENABLED&lt;/code&gt; is found, otherwise the default Tideways configuration is outputted.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>